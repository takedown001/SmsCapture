UpLevelSequenceServer");

	UPersistClientStateComponent_SetUpLevelSequenceServer_Params params;
	params.bSetUp = bSetUp;
	params.OwningActor = OwningActor;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PersistClientStateComponent.SetUpLevelSequenceInfo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                           bSetUp                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  SequenceActorClass             (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FLevelSequenceBindingInfo> LevelSequenceBindings          (Parm, ZeroConstructor)
// struct FTransform              TransfromOrigin                (Parm, IsPlainOldData)
// class AActor*                  TransfromOriginActor           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRunServer                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAutoStop                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ServerFixTime                  (Parm, ZeroConstructor, IsPlainOldData)

void UPersistClientStateComponent::SetUpLevelSequenceInfo(bool bSetUp, class UClass* SequenceActorClass, TArray<struct FLevelSequenceBindingInfo> LevelSequenceBindings, const struct FTransform& TransfromOrigin, class AActor* TransfromOriginActor, bool bRunServer, bool bAutoStop, float ServerFixTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PersistClientStateComponent.SetUpLevelSequenceInfo");

	UPersistClientStateComponent_SetUpLevelSequenceInfo_Params params;
	params.bSetUp = bSetUp;
	params.SequenceActorClass = SequenceActorClass;
	params.LevelSequenceBindings = LevelSequenceBindings;
	params.TransfromOrigin = TransfromOrigin;
	params.TransfromOriginActor = TransfromOriginActor;
	params.bRunServer = bRunServer;
	params.bAutoStop = bAutoStop;
	params.ServerFixTime = ServerFixTime;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PersistClientStateComponent.ServerSetSequenceTimer
// (Final, Native, Protected)
// Parameters:
// float                          ServerFixTime                  (Parm, ZeroConstructor, IsPlainOldData)

void UPersistClientStateComponent::ServerSetSequenceTimer(float ServerFixTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PersistClientStateComponent.ServerSetSequenceTimer");

	UPersistClientStateComponent_ServerSetSequenceTimer_Params params;
	params.ServerFixTime = ServerFixTime;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PersistClientStateComponent.RefreshCurSeuqencePos
// (Final, Native, Public)

void UPersistClientStateComponent::RefreshCurSeuqencePos()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PersistClientStateComponent.RefreshCurSeuqencePos");

	UPersistClientStateComponent_RefreshCurSeuqencePos_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PersistClientStateComponent.RecoverClientStateNetLoss
// (Final, Native, Public)
// Parameters:
// class AUAEPlayerController*    PC                             (Parm, ZeroConstructor, IsPlainOldData)

void UPersistClientStateComponent::RecoverClientStateNetLoss(class AUAEPlayerController* PC)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PersistClientStateComponent.RecoverClientStateNetLoss");

	UPersistClientStateComponent_RecoverClientStateNetLoss_Params params;
	params.PC = PC;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PersistClientStateComponent.RecoverClientStateApplicationReactivated
// (Final, Native, Public)

void UPersistClientStateComponent::RecoverClientStateApplicationReactivated()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PersistClientStateComponent.RecoverClientStateApplicationReactivated");

	UPersistClientStateComponent_RecoverClientStateApplicationReactivated_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PersistClientStateComponent.OnServerPlayerSequenceTD
// (Final, Native, Public)

void UPersistClientStateComponent::OnServerPlayerSequenceTD()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PersistClientStateComponent.OnServerPlayerSequenceTD");

	UPersistClientStateComponent_OnServerPlayerSequenceTD_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PersistClientStateComponent.OnRepGameStateServerTime
// (Final, Native, Public)
// Parameters:
// float                          NewServerTimeSeconds           (Parm, ZeroConstructor, IsPlainOldData)

void UPersistClientStateComponent::OnRepGameStateServerTime(float NewServerTimeSeconds)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PersistClientStateComponent.OnRepGameStateServerTime");

	UPersistClientStateComponent_OnRepGameStateServerTime_Params params;
	params.NewServerTimeSeconds = NewServerTimeSeconds;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PersistClientStateComponent.OnRep_PlaySequenceInfo
// (Final, Native, Private)

void UPersistClientStateComponent::OnRep_PlaySequenceInfo()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PersistClientStateComponent.OnRep_PlaySequenceInfo");

	UPersistClientStateComponent_OnRep_PlaySequenceInfo_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PersistClientStateComponent.OnRep_LevelSequenceInfo
// (Final, Native, Private)

void UPersistClientStateComponent::OnRep_LevelSequenceInfo()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PersistClientStateComponent.OnRep_LevelSequenceInfo");

	UPersistClientStateComponent_OnRep_LevelSequenceInfo_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PersistClientStateComponent.HandlePlayerSeuqence
// (Final, Native, Public)

void UPersistClientStateComponent::HandlePlayerSeuqence()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PersistClientStateComponent.HandlePlayerSeuqence");

	UPersistClientStateComponent_HandlePlayerSeuqence_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PersistClientStateComponent.ClearSequenceRepInfo
// (Final, Native, Protected)

void UPersistClientStateComponent::ClearSequenceRepInfo()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PersistClientStateComponent.ClearSequenceRepInfo");

	UPersistClientStateComponent_ClearSequenceRepInfo_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetAvatarComponent.IsMasterMeshSlotID
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            InSlotID                       (Parm, ZeroConstructor, IsPlainOldData)
// class UItemHandleBase*         InItemHandle                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPetAvatarComponent::IsMasterMeshSlotID(int InSlotID, class UItemHandleBase* InItemHandle)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetAvatarComponent.IsMasterMeshSlotID");

	UPetAvatarComponent_IsMasterMeshSlotID_Params params;
	params.InSlotID = InSlotID;
	params.InItemHandle = InItemHandle;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PetAvatarComponent.InitMasterComponent
// (Final, Native, Public, BlueprintCallable)

void UPetAvatarComponent::InitMasterComponent()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetAvatarComponent.InitMasterComponent");

	UPetAvatarComponent_InitMasterComponent_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetAvatarComponent.Initialize
// (Native, Public)

void UPetAvatarComponent::Initialize()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetAvatarComponent.Initialize");

	UPetAvatarComponent_Initialize_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetAvatarComponent.InitialAvatarParam
// (Final, Native, Public, BlueprintCallable)

void UPetAvatarComponent::InitialAvatarParam()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetAvatarComponent.InitialAvatarParam");

	UPetAvatarComponent_InitialAvatarParam_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetEntityComponent.UpdateAttachInfoList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bAdd                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FFixPetAttachInfo       Info                           (Parm, IsPlainOldData)

void UPetEntityComponent::UpdateAttachInfoList(bool bAdd, const struct FFixPetAttachInfo& Info)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEntityComponent.UpdateAttachInfoList");

	UPetEntityComponent_UpdateAttachInfoList_Params params;
	params.bAdd = bAdd;
	params.Info = Info;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetEntityComponent.OnPetStateChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// TEnumAsByte<EPetState>         State                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsEnter                        (Parm, ZeroConstructor, IsPlainOldData)

void UPetEntityComponent::OnPetStateChanged(TEnumAsByte<EPetState> State, bool IsEnter)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEntityComponent.OnPetStateChanged");

	UPetEntityComponent_OnPetStateChanged_Params params;
	params.State = State;
	params.IsEnter = IsEnter;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetEntityComponent.GetPetCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASTExtraPetCharacter*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ASTExtraPetCharacter* UPetEntityComponent::GetPetCharacter()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEntityComponent.GetPetCharacter");

	UPetEntityComponent_GetPetCharacter_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PetEntityComponent.GetCurrentAttachInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPetAttachInfo          ReturnValue                    (Parm, OutParm, ReturnParm)

struct FPetAttachInfo UPetEntityComponent::GetCurrentAttachInfo()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEntityComponent.GetCurrentAttachInfo");

	UPetEntityComponent_GetCurrentAttachInfo_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PetEntityComponent.GetAttachInfoFromTable
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFixPetAttachInfo       Info                           (Parm, IsPlainOldData)
// struct FPetAttachInfo          ReturnValue                    (Parm, OutParm, ReturnParm)

struct FPetAttachInfo UPetEntityComponent::GetAttachInfoFromTable(const struct FFixPetAttachInfo& Info)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEntityComponent.GetAttachInfoFromTable");

	UPetEntityComponent_GetAttachInfoFromTable_Params params;
	params.Info = Info;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PetEventItem.UpdateCanPlayMontageList
// (Native, Public)

void UPetEventItem::UpdateCanPlayMontageList()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEventItem.UpdateCanPlayMontageList");

	UPetEventItem_UpdateCanPlayMontageList_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetEventItem.SelectRandomMontage
// (Native, Public)

void UPetEventItem::SelectRandomMontage()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEventItem.SelectRandomMontage");

	UPetEventItem_SelectRandomMontage_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetEventItem.OnEventStart
// (Native, Public, BlueprintCallable)
// Parameters:
// class ASTExtraPetCharacter*    Pet                            (Parm, ZeroConstructor, IsPlainOldData)

void UPetEventItem::OnEventStart(class ASTExtraPetCharacter* Pet)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEventItem.OnEventStart");

	UPetEventItem_OnEventStart_Params params;
	params.Pet = Pet;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetEventItem.OnEventEnd
// (Native, Public, BlueprintCallable)

void UPetEventItem::OnEventEnd()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEventItem.OnEventEnd");

	UPetEventItem_OnEventEnd_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetEventItem.IsSameEvent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPetWaitEventInfo*       WaitEvent                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPetEventItem::IsSameEvent(class UPetWaitEventInfo* WaitEvent)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEventItem.IsSameEvent");

	UPetEventItem_IsSameEvent_Params params;
	params.WaitEvent = WaitEvent;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PetEmotionEventItem.OnEventStart
// (Native, Public, BlueprintCallable)
// Parameters:
// class ASTExtraPetCharacter*    Pet                            (Parm, ZeroConstructor, IsPlainOldData)

void UPetEmotionEventItem::OnEventStart(class ASTExtraPetCharacter* Pet)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEmotionEventItem.OnEventStart");

	UPetEmotionEventItem_OnEventStart_Params params;
	params.Pet = Pet;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetEmotionEventItem.OnEventEnd
// (Native, Public, BlueprintCallable)

void UPetEmotionEventItem::OnEventEnd()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEmotionEventItem.OnEventEnd");

	UPetEmotionEventItem_OnEventEnd_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetEmotionEventItem.IsSameEvent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPetWaitEventInfo*       WaitEvent                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPetEmotionEventItem::IsSameEvent(class UPetWaitEventInfo* WaitEvent)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEmotionEventItem.IsSameEvent");

	UPetEmotionEventItem_IsSameEvent_Params params;
	params.WaitEvent = WaitEvent;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerStateEventItem.OnEventStart
// (Native, Public, BlueprintCallable)
// Parameters:
// class ASTExtraPetCharacter*    Pet                            (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerStateEventItem::OnEventStart(class ASTExtraPetCharacter* Pet)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerStateEventItem.OnEventStart");

	UPlayerStateEventItem_OnEventStart_Params params;
	params.Pet = Pet;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerStateEventItem.OnEventEnd
// (Native, Public, BlueprintCallable)

void UPlayerStateEventItem::OnEventEnd()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerStateEventItem.OnEventEnd");

	UPlayerStateEventItem_OnEventEnd_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerStateEventItem.IsSameEvent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPetWaitEventInfo*       WaitEvent                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlayerStateEventItem::IsSameEvent(class UPetWaitEventInfo* WaitEvent)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerStateEventItem.IsSameEvent");

	UPlayerStateEventItem_IsSameEvent_Params params;
	params.WaitEvent = WaitEvent;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.RandomMontageEventItem.OnEventStart
// (Native, Public, BlueprintCallable)
// Parameters:
// class ASTExtraPetCharacter*    Pet                            (Parm, ZeroConstructor, IsPlainOldData)

void URandomMontageEventItem::OnEventStart(class ASTExtraPetCharacter* Pet)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.RandomMontageEventItem.OnEventStart");

	URandomMontageEventItem_OnEventStart_Params params;
	params.Pet = Pet;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetPlayerEmotionEventItem.IsSameEvent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPetWaitEventInfo*       WaitEvent                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPetPlayerEmotionEventItem::IsSameEvent(class UPetWaitEventInfo* WaitEvent)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetPlayerEmotionEventItem.IsSameEvent");

	UPetPlayerEmotionEventItem_IsSameEvent_Params params;
	params.WaitEvent = WaitEvent;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PetEventManagerComponent.TriggerPetEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPetWaitEventInfo*       Event                          (Parm, ZeroConstructor, IsPlainOldData)

void UPetEventManagerComponent::TriggerPetEvent(class UPetWaitEventInfo* Event)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEventManagerComponent.TriggerPetEvent");

	UPetEventManagerComponent_TriggerPetEvent_Params params;
	params.Event = Event;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetEventManagerComponent.StartEventExecTimer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ExecTime                       (Parm, ZeroConstructor, IsPlainOldData)

void UPetEventManagerComponent::StartEventExecTimer(float ExecTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEventManagerComponent.StartEventExecTimer");

	UPetEventManagerComponent_StartEventExecTimer_Params params;
	params.ExecTime = ExecTime;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetEventManagerComponent.ProcessWaitEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Delta                          (Parm, ZeroConstructor, IsPlainOldData)

void UPetEventManagerComponent::ProcessWaitEvent(float Delta)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEventManagerComponent.ProcessWaitEvent");

	UPetEventManagerComponent_ProcessWaitEvent_Params params;
	params.Delta = Delta;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetEventManagerComponent.GetPredictPetOwnerState
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FPetEventPlayerStateTypeSt StateSt                        (Parm)
// TEnumAsByte<EPetState>         Enter                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPetState>         Leave                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPetEventManagerComponent::GetPredictPetOwnerState(const struct FPetEventPlayerStateTypeSt& StateSt, TEnumAsByte<EPetState>* Enter, TEnumAsByte<EPetState>* Leave)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEventManagerComponent.GetPredictPetOwnerState");

	UPetEventManagerComponent_GetPredictPetOwnerState_Params params;
	params.StateSt = StateSt;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (Enter != nullptr)
		*Enter = params.Enter;
	if (Leave != nullptr)
		*Leave = params.Leave;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PetEventManagerComponent.GetEventItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPetWaitEventInfo*       EventInfo                      (Parm, ZeroConstructor, IsPlainOldData)
// class UPetEventItem*           ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPetEventItem* UPetEventManagerComponent::GetEventItem(class UPetWaitEventInfo* EventInfo)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEventManagerComponent.GetEventItem");

	UPetEventManagerComponent_GetEventItem_Params params;
	params.EventInfo = EventInfo;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PetEventManagerComponent.EnqueueWaitEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPetWaitEventInfo*       Info                           (Parm, ZeroConstructor, IsPlainOldData)

void UPetEventManagerComponent::EnqueueWaitEvent(class UPetWaitEventInfo* Info)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEventManagerComponent.EnqueueWaitEvent");

	UPetEventManagerComponent_EnqueueWaitEvent_Params params;
	params.Info = Info;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetEventManagerComponent.DequeueWaitEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNeedExec                      (Parm, ZeroConstructor, IsPlainOldData)

void UPetEventManagerComponent::DequeueWaitEvent(bool bNeedExec)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEventManagerComponent.DequeueWaitEvent");

	UPetEventManagerComponent_DequeueWaitEvent_Params params;
	params.bNeedExec = bNeedExec;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PetEventManagerComponent.CheckCanInterruptCurEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPetEventItem*           NextEventItem                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPetEventManagerComponent::CheckCanInterruptCurEvent(class UPetEventItem* NextEventItem)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEventManagerComponent.CheckCanInterruptCurEvent");

	UPetEventManagerComponent_CheckCanInterruptCurEvent_Params params;
	params.NextEventItem = NextEventItem;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PetEventManagerComponent.CanResponseEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPetEventManagerComponent::CanResponseEvent()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEventManagerComponent.CanResponseEvent");

	UPetEventManagerComponent_CanResponseEvent_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PetEventManagerComponent.AddPetMontageConfig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FPetMontageConfig       MontageConfig                  (Parm, IsPlainOldData)
// TEnumAsByte<EPetEventType>     eEventType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRemove                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPetEventManagerComponent::AddPetMontageConfig(const struct FPetMontageConfig& MontageConfig, TEnumAsByte<EPetEventType> eEventType, bool bRemove)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PetEventManagerComponent.AddPetMontageConfig");

	UPetEventManagerComponent_AddPetMontageConfig_Params params;
	params.MontageConfig = MontageConfig;
	params.eEventType = eEventType;
	params.bRemove = bRemove;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PickupDropFixedPosition.UseDropFixedPosition
// (Native, Public, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPickupDropFixedPosition::UseDropFixedPosition()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupDropFixedPosition.UseDropFixedPosition");

	UPickupDropFixedPosition_UseDropFixedPosition_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PickupDropFixedPosition.IsDropFixedRelativePositionSetUp
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPickupDropFixedPosition::IsDropFixedRelativePositionSetUp()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupDropFixedPosition.IsDropFixedRelativePositionSetUp");

	UPickupDropFixedPosition_IsDropFixedRelativePositionSetUp_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PickupDropFixedPosition.GetDropFixedRelativePosition
// (Native, Public, HasDefaults)
// Parameters:
// class AActor*                  DropOwner                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UPickupDropFixedPosition::GetDropFixedRelativePosition(class AActor* DropOwner)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupDropFixedPosition.GetDropFixedRelativePosition");

	UPickupDropFixedPosition_GetDropFixedRelativePosition_Params params;
	params.DropOwner = DropOwner;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PickupManagerComponent.ServerPutDownTargetWithLocation
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults, NetValidate)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Loc                            (Parm, IsPlainOldData)

void UPickupManagerComponent::ServerPutDownTargetWithLocation(class AActor* Target, const struct FVector& Loc)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.ServerPutDownTargetWithLocation");

	UPickupManagerComponent_ServerPutDownTargetWithLocation_Params params;
	params.Target = Target;
	params.Loc = Loc;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupManagerComponent.ServerPutDownTarget
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)

void UPickupManagerComponent::ServerPutDownTarget(class AActor* Target)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.ServerPutDownTarget");

	UPickupManagerComponent_ServerPutDownTarget_Params params;
	params.Target = Target;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupManagerComponent.ServerPickUpTarget
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            AdditionalParam                (Parm, ZeroConstructor, IsPlainOldData)
// int                            pickCount                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            BattleItemClientPickupType     (Parm, ZeroConstructor, IsPlainOldData)

void UPickupManagerComponent::ServerPickUpTarget(class AActor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.ServerPickUpTarget");

	UPickupManagerComponent_ServerPickUpTarget_Params params;
	params.Target = Target;
	params.AdditionalParam = AdditionalParam;
	params.pickCount = pickCount;
	params.BattleItemClientPickupType = BattleItemClientPickupType;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupManagerComponent.ServerPickUpAttachmentTarget
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FPickUpItemData         ItemData                       (ConstParm, Parm, ReferenceParm)
// int                            PickupAttachmentID             (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemDefineID           TargetDefineID                 (Parm)

void UPickupManagerComponent::ServerPickUpAttachmentTarget(class AActor* Target, const struct FPickUpItemData& ItemData, int PickupAttachmentID, const struct FItemDefineID& TargetDefineID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.ServerPickUpAttachmentTarget");

	UPickupManagerComponent_ServerPickUpAttachmentTarget_Params params;
	params.Target = Target;
	params.ItemData = ItemData;
	params.PickupAttachmentID = PickupAttachmentID;
	params.TargetDefineID = TargetDefineID;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupManagerComponent.PutDownTargetWithLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Loc                            (Parm, IsPlainOldData)

void UPickupManagerComponent::PutDownTargetWithLocation(class AActor* Target, const struct FVector& Loc)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.PutDownTargetWithLocation");

	UPickupManagerComponent_PutDownTargetWithLocation_Params params;
	params.Target = Target;
	params.Loc = Loc;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupManagerComponent.PutDownTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)

void UPickupManagerComponent::PutDownTarget(class AActor* Target)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.PutDownTarget");

	UPickupManagerComponent_PutDownTarget_Params params;
	params.Target = Target;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupManagerComponent.PickUpTargetAttachment
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FPickUpItemData         ItemData                       (ConstParm, Parm, OutParm, ReferenceParm)
// int                            PickupAttachmentID             (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemDefineID           TargetDefineID                 (Parm)

void UPickupManagerComponent::PickUpTargetAttachment(class AActor* Target, const struct FPickUpItemData& ItemData, int PickupAttachmentID, const struct FItemDefineID& TargetDefineID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.PickUpTargetAttachment");

	UPickupManagerComponent_PickUpTargetAttachment_Params params;
	params.Target = Target;
	params.ItemData = ItemData;
	params.PickupAttachmentID = PickupAttachmentID;
	params.TargetDefineID = TargetDefineID;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupManagerComponent.PickUpTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            AdditionalParam                (Parm, ZeroConstructor, IsPlainOldData)
// int                            pickCount                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            BattleItemClientPickupType     (Parm, ZeroConstructor, IsPlainOldData)

void UPickupManagerComponent::PickUpTarget(class AActor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.PickUpTarget");

	UPickupManagerComponent_PickUpTarget_Params params;
	params.Target = Target;
	params.AdditionalParam = AdditionalParam;
	params.pickCount = pickCount;
	params.BattleItemClientPickupType = BattleItemClientPickupType;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupManagerComponent.NotifyMissPickupAvailableActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)

void UPickupManagerComponent::NotifyMissPickupAvailableActor(class AActor* Target)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.NotifyMissPickupAvailableActor");

	UPickupManagerComponent_NotifyMissPickupAvailableActor_Params params;
	params.Target = Target;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupManagerComponent.NotifyMeetPickupAvailableActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdatePickupManager           (Parm, ZeroConstructor, IsPlainOldData)

void UPickupManagerComponent::NotifyMeetPickupAvailableActor(class AActor* Target, bool bUpdatePickupManager)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.NotifyMeetPickupAvailableActor");

	UPickupManagerComponent_NotifyMeetPickupAvailableActor_Params params;
	params.Target = Target;
	params.bUpdatePickupManager = bUpdatePickupManager;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupManagerComponent.MarkRecentAutoPickUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSearchedPickUpItemResult PickUpResult                   (Parm)

void UPickupManagerComponent::MarkRecentAutoPickUp(const struct FSearchedPickUpItemResult& PickUpResult)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.MarkRecentAutoPickUp");

	UPickupManagerComponent_MarkRecentAutoPickUp_Params params;
	params.PickUpResult = PickUpResult;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupManagerComponent.GetRandomPutDownLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          OverrideFindPutDownPointZThreshold (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UPickupManagerComponent::GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.GetRandomPutDownLocation");

	UPickupManagerComponent_GetRandomPutDownLocation_Params params;
	params.OverrideFindPutDownPointZThreshold = OverrideFindPutDownPointZThreshold;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PickupManagerComponent.GetNearItemLocationList
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FVector                 TargetLoc                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          IgnoreDist                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<uint32_t>               ItemIDs                        (Parm, ZeroConstructor)
// TArray<struct FVector>         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FVector> UPickupManagerComponent::GetNearItemLocationList(const struct FVector& TargetLoc, float Radius, float IgnoreDist, TArray<uint32_t> ItemIDs)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.GetNearItemLocationList");

	UPickupManagerComponent_GetNearItemLocationList_Params params;
	params.TargetLoc = TargetLoc;
	params.Radius = Radius;
	params.IgnoreDist = IgnoreDist;
	params.ItemIDs = ItemIDs;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PickupManagerComponent.GetConfirmedPickupAvailableActors
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)

void UPickupManagerComponent::GetConfirmedPickupAvailableActors()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.GetConfirmedPickupAvailableActors");

	UPickupManagerComponent_GetConfirmedPickupAvailableActors_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupManagerComponent.ControlClientPutDownTargetWithLocation
// (Net, NetReliable, Native, Event, Protected, HasDefaults, NetClient, NetValidate)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Loc                            (Parm, IsPlainOldData)

void UPickupManagerComponent::ControlClientPutDownTargetWithLocation(class AActor* Target, const struct FVector& Loc)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.ControlClientPutDownTargetWithLocation");

	UPickupManagerComponent_ControlClientPutDownTargetWithLocation_Params params;
	params.Target = Target;
	params.Loc = Loc;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupManagerComponent.ControlClientPutDownTarget
// (Net, NetReliable, Native, Event, Protected, NetClient, NetValidate)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)

void UPickupManagerComponent::ControlClientPutDownTarget(class AActor* Target)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.ControlClientPutDownTarget");

	UPickupManagerComponent_ControlClientPutDownTarget_Params params;
	params.Target = Target;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupManagerComponent.ControlClientPickUpTarget
// (Net, NetReliable, Native, Event, Protected, NetClient, NetValidate)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            AdditionalParam                (Parm, ZeroConstructor, IsPlainOldData)

void UPickupManagerComponent::ControlClientPickUpTarget(class AActor* Target, int AdditionalParam)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.ControlClientPickUpTarget");

	UPickupManagerComponent_ControlClientPickUpTarget_Params params;
	params.Target = Target;
	params.AdditionalParam = AdditionalParam;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupManagerComponent.ControlClientPickUpAttachmentTarget
// (Net, NetReliable, Native, Event, Protected, NetClient, NetValidate)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            AdditionalParam                (Parm, ZeroConstructor, IsPlainOldData)
// int                            PickupAttachmentID             (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemDefineID           TargetDefineID                 (Parm)

void UPickupManagerComponent::ControlClientPickUpAttachmentTarget(class AActor* Target, int AdditionalParam, int PickupAttachmentID, const struct FItemDefineID& TargetDefineID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.ControlClientPickUpAttachmentTarget");

	UPickupManagerComponent_ControlClientPickUpAttachmentTarget_Params params;
	params.Target = Target;
	params.AdditionalParam = AdditionalParam;
	params.PickupAttachmentID = PickupAttachmentID;
	params.TargetDefineID = TargetDefineID;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupManagerComponent.ClampWorldLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 OutVector                      (Parm, OutParm, IsPlainOldData)

void UPickupManagerComponent::ClampWorldLocation(struct FVector* OutVector)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.ClampWorldLocation");

	UPickupManagerComponent_ClampWorldLocation_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (OutVector != nullptr)
		*OutVector = params.OutVector;
}


// Function ShadowTrackerExtra.PickupManagerComponent.CheckRecentAutoPickUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSearchedPickUpItemResult PickUpResult                   (Parm)
// float                          OverTime                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPickupManagerComponent::CheckRecentAutoPickUp(const struct FSearchedPickUpItemResult& PickUpResult, float OverTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupManagerComponent.CheckRecentAutoPickUp");

	UPickupManagerComponent_CheckRecentAutoPickUp_Params params;
	params.PickUpResult = PickUpResult;
	params.OverTime = OverTime;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.ResetDestructedState
// (Final, Native, Protected, BlueprintCallable)

void UPickUpWrapperDestructibleComponent::ResetDestructedState()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.ResetDestructedState");

	UPickUpWrapperDestructibleComponent_ResetDestructedState_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.ReceiveTakeDamage
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AController*             InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void UPickUpWrapperDestructibleComponent::ReceiveTakeDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.ReceiveTakeDamage");

	UPickUpWrapperDestructibleComponent_ReceiveTakeDamage_Params params;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.ReceiveResetDestructedState
// (Event, Protected, BlueprintEvent)

void UPickUpWrapperDestructibleComponent::ReceiveResetDestructedState()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.ReceiveResetDestructedState");

	UPickUpWrapperDestructibleComponent_ReceiveResetDestructedState_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.ReceiveDestructed
// (Event, Protected, BlueprintEvent)

void UPickUpWrapperDestructibleComponent::ReceiveDestructed()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.ReceiveDestructed");

	UPickUpWrapperDestructibleComponent_ReceiveDestructed_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.OnRep_LastHitInfo
// (Event, Protected, BlueprintEvent)

void UPickUpWrapperDestructibleComponent::OnRep_LastHitInfo()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.OnRep_LastHitInfo");

	UPickUpWrapperDestructibleComponent_OnRep_LastHitInfo_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.OnRep_Health
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                          PrevHealth                     (Parm, ZeroConstructor, IsPlainOldData)

void UPickUpWrapperDestructibleComponent::OnRep_Health(float PrevHealth)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.OnRep_Health");

	UPickUpWrapperDestructibleComponent_OnRep_Health_Params params;
	params.PrevHealth = PrevHealth;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.OnRep_bDestructed
// (Native, Event, Protected, BlueprintEvent)

void UPickUpWrapperDestructibleComponent::OnRep_bDestructed()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.OnRep_bDestructed");

	UPickUpWrapperDestructibleComponent_OnRep_bDestructed_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// DelegateFunction ShadowTrackerExtra.PickUpWrapperDestructibleComponent.OnDestructed__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UPickUpWrapperDestructibleComponent* DestructedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPickUpWrapperDestructibleComponent::OnDestructed__DelegateSignature(class UPickUpWrapperDestructibleComponent* DestructedComponent)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("DelegateFunction ShadowTrackerExtra.PickUpWrapperDestructibleComponent.OnDestructed__DelegateSignature");

	UPickUpWrapperDestructibleComponent_OnDestructed__DelegateSignature_Params params;
	params.DestructedComponent = DestructedComponent;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.ModifyDamage
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AController*             InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPickUpWrapperDestructibleComponent::ModifyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.ModifyDamage");

	UPickUpWrapperDestructibleComponent_ModifyDamage_Params params;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.HandleTakeDamage
// (Final, Native, Protected)
// Parameters:
// class AActor*                  DamagedActor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AController*             InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void UPickUpWrapperDestructibleComponent::HandleTakeDamage(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickUpWrapperDestructibleComponent.HandleTakeDamage");

	UPickUpWrapperDestructibleComponent_HandleTakeDamage_Params params;
	params.DamagedActor = DamagedActor;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PickupWrapperManagerComponent.GetEffectCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPickupWrapperManagerComponent::GetEffectCount()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PickupWrapperManagerComponent.GetEffectCount");

	UPickupWrapperManagerComponent_GetEffectCount_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlanAGGameState.SendTeamReportData
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<struct FPlanAGTeamReportData> TeamReportDataList             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void APlanAGGameState::SendTeamReportData(TArray<struct FPlanAGTeamReportData> TeamReportDataList)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanAGGameState.SendTeamReportData");

	APlanAGGameState_SendTeamReportData_Params params;
	params.TeamReportDataList = TeamReportDataList;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlanAGGameState.SendPlayerReportData
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<struct FPlanAGPlayerReportData> PlayerReportDataList           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void APlanAGGameState::SendPlayerReportData(TArray<struct FPlanAGPlayerReportData> PlayerReportDataList)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanAGGameState.SendPlayerReportData");

	APlanAGGameState_SendPlayerReportData_Params params;
	params.PlayerReportDataList = PlayerReportDataList;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlanAGGameState.OnRep_TeamInfoLowFrequency
// (Event, Public, BlueprintEvent)

void APlanAGGameState::OnRep_TeamInfoLowFrequency()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanAGGameState.OnRep_TeamInfoLowFrequency");

	APlanAGGameState_OnRep_TeamInfoLowFrequency_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlanAGGameState.OnRep_TeamInfoHighFrequency
// (Event, Public, BlueprintEvent)

void APlanAGGameState::OnRep_TeamInfoHighFrequency()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanAGGameState.OnRep_TeamInfoHighFrequency");

	APlanAGGameState_OnRep_TeamInfoHighFrequency_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlanAGGameState.OnRep_TeamCurrentInfo
// (Event, Public, BlueprintEvent)

void APlanAGGameState::OnRep_TeamCurrentInfo()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanAGGameState.OnRep_TeamCurrentInfo");

	APlanAGGameState_OnRep_TeamCurrentInfo_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlanAGGameState.OnRep_CheckScorePointIndexList
// (Event, Public, BlueprintEvent)

void APlanAGGameState::OnRep_CheckScorePointIndexList()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanAGGameState.OnRep_CheckScorePointIndexList");

	APlanAGGameState_OnRep_CheckScorePointIndexList_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlanAGGameState.OnRep_CheckPointInfos
// (Event, Public, BlueprintEvent)

void APlanAGGameState::OnRep_CheckPointInfos()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanAGGameState.OnRep_CheckPointInfos");

	APlanAGGameState_OnRep_CheckPointInfos_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlanAGGameState.OnRep_AsianVehicleInfo
// (Event, Public, BlueprintEvent)

void APlanAGGameState::OnRep_AsianVehicleInfo()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanAGGameState.OnRep_AsianVehicleInfo");

	APlanAGGameState_OnRep_AsianVehicleInfo_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlanDPlayerState.ServerSetUAVAirDropBoxType
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// int                            BoxType                        (Parm, ZeroConstructor, IsPlainOldData)

void APlanDPlayerState::ServerSetUAVAirDropBoxType(int BoxType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanDPlayerState.ServerSetUAVAirDropBoxType");

	APlanDPlayerState_ServerSetUAVAirDropBoxType_Params params;
	params.BoxType = BoxType;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlanDPlayerState.OnRep_UAVAirDropBoxType
// (Final, Native, Protected)

void APlanDPlayerState::OnRep_UAVAirDropBoxType()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanDPlayerState.OnRep_UAVAirDropBoxType");

	APlanDPlayerState_OnRep_UAVAirDropBoxType_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlanDPlayerState.OnRep_IsAREnable
// (Native, Event, Public, BlueprintEvent)

void APlanDPlayerState::OnRep_IsAREnable()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanDPlayerState.OnRep_IsAREnable");

	APlanDPlayerState_OnRep_IsAREnable_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlanDPlayerState.OnRep_ExpCount
// (Native, Event, Public, BlueprintEvent)

void APlanDPlayerState::OnRep_ExpCount()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanDPlayerState.OnRep_ExpCount");

	APlanDPlayerState_OnRep_ExpCount_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlanDPlayerState.BPServerSetUAVAirDropBoxType
// (Event, Protected, BlueprintEvent)
// Parameters:
// int                            BoxType                        (Parm, ZeroConstructor, IsPlainOldData)

void APlanDPlayerState::BPServerSetUAVAirDropBoxType(int BoxType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanDPlayerState.BPServerSetUAVAirDropBoxType");

	APlanDPlayerState_BPServerSetUAVAirDropBoxType_Params params;
	params.BoxType = BoxType;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlaneAvatarComponent.PreChangePlaneAvatar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            InItemID                       (Parm, ZeroConstructor, IsPlainOldData)

void UPlaneAvatarComponent::PreChangePlaneAvatar(int InItemID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneAvatarComponent.PreChangePlaneAvatar");

	UPlaneAvatarComponent_PreChangePlaneAvatar_Params params;
	params.InItemID = InItemID;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlaneAvatarComponent.PostChangePlaneAvatar
// (Final, Native, Public, BlueprintCallable)

void UPlaneAvatarComponent::PostChangePlaneAvatar()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneAvatarComponent.PostChangePlaneAvatar");

	UPlaneAvatarComponent_PostChangePlaneAvatar_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlaneAvatarComponent.PlaneChangeAvatarAsyncLoadComplete
// (Final, Native, Public)
// Parameters:
// class UClass*                  InLoadClass                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            InItemID                       (Parm, ZeroConstructor, IsPlainOldData)

void UPlaneAvatarComponent::PlaneChangeAvatarAsyncLoadComplete(class UClass* InLoadClass, int InItemID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneAvatarComponent.PlaneChangeAvatarAsyncLoadComplete");

	UPlaneAvatarComponent_PlaneChangeAvatarAsyncLoadComplete_Params params;
	params.InLoadClass = InLoadClass;
	params.InItemID = InItemID;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlaneAvatarComponent.OnRep_PlaneAvatarChanged
// (Final, Native, Public)

void UPlaneAvatarComponent::OnRep_PlaneAvatarChanged()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneAvatarComponent.OnRep_PlaneAvatarChanged");

	UPlaneAvatarComponent_OnRep_PlaneAvatarChanged_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlaneAvatarComponent.GetSoftRefObj
// (Final, Native, Protected, HasOutParms, HasDefaults)
// Parameters:
// struct FSoftObjectPath         AssetRef                       (Parm, OutParm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UPlaneAvatarComponent::GetSoftRefObj(struct FSoftObjectPath* AssetRef)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneAvatarComponent.GetSoftRefObj");

	UPlaneAvatarComponent_GetSoftRefObj_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (AssetRef != nullptr)
		*AssetRef = params.AssetRef;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlaneAvatarComponent.GetPlaneAvatarHandle
// (Event, Public, BlueprintEvent)
// Parameters:
// int                            ItemId                         (Parm, ZeroConstructor, IsPlainOldData)
// class UBackpackPlaneAvatarHandle* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UBackpackPlaneAvatarHandle* UPlaneAvatarComponent::GetPlaneAvatarHandle(int ItemId)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneAvatarComponent.GetPlaneAvatarHandle");

	UPlaneAvatarComponent_GetPlaneAvatarHandle_Params params;
	params.ItemId = ItemId;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlaneAvatarComponent.GetDynamicMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstance*       MatInstance                    (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInterface* UPlaneAvatarComponent::GetDynamicMaterial(class UMaterialInstance* MatInstance)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneAvatarComponent.GetDynamicMaterial");

	UPlaneAvatarComponent_GetDynamicMaterial_Params params;
	params.MatInstance = MatInstance;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlaneAvatarComponent.AsyncLoadPlaneAvatarDone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            InItemID                       (Parm, ZeroConstructor, IsPlainOldData)

void UPlaneAvatarComponent::AsyncLoadPlaneAvatarDone(int InItemID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneAvatarComponent.AsyncLoadPlaneAvatarDone");

	UPlaneAvatarComponent_AsyncLoadPlaneAvatarDone_Params params;
	params.InItemID = InItemID;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlaneAvatarComponent.AsyncChangePlaneAvatar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            InItemID                       (Parm, ZeroConstructor, IsPlainOldData)

void UPlaneAvatarComponent::AsyncChangePlaneAvatar(int InItemID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneAvatarComponent.AsyncChangePlaneAvatar");

	UPlaneAvatarComponent_AsyncChangePlaneAvatar_Params params;
	params.InItemID = InItemID;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlaneCharacter.OnRequestImgSuccess
// (Final, Native, Protected)
// Parameters:
// class UTexture2D*              Texture                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 RequestedURL                   (Parm, ZeroConstructor)

void APlaneCharacter::OnRequestImgSuccess(class UTexture2D* Texture, const struct FString& RequestedURL)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneCharacter.OnRequestImgSuccess");

	APlaneCharacter_OnRequestImgSuccess_Params params;
	params.Texture = Texture;
	params.RequestedURL = RequestedURL;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlaneCharacter.OnRep_PlayerNum
// (Final, Native, Protected)

void APlaneCharacter::OnRep_PlayerNum()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneCharacter.OnRep_PlayerNum");

	APlaneCharacter_OnRep_PlayerNum_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlaneCharacter.OnRep_GetHttpPlaneBannerRightImg
// (Final, Native, Protected)

void APlaneCharacter::OnRep_GetHttpPlaneBannerRightImg()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneCharacter.OnRep_GetHttpPlaneBannerRightImg");

	APlaneCharacter_OnRep_GetHttpPlaneBannerRightImg_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlaneCharacter.OnRep_GetHttpPlaneBannerLeftImg
// (Final, Native, Protected)

void APlaneCharacter::OnRep_GetHttpPlaneBannerLeftImg()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneCharacter.OnRep_GetHttpPlaneBannerLeftImg");

	APlaneCharacter_OnRep_GetHttpPlaneBannerLeftImg_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlaneCharacter.OnRep_EnableBanner
// (Final, Native, Protected)

void APlaneCharacter::OnRep_EnableBanner()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneCharacter.OnRep_EnableBanner");

	APlaneCharacter_OnRep_EnableBanner_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlaneComponent.StartFlight
// (Final, Native, Public)
// Parameters:
// int                            FlightNo                       (Parm, ZeroConstructor, IsPlainOldData)

void UPlaneComponent::StartFlight(int FlightNo)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneComponent.StartFlight");

	UPlaneComponent_StartFlight_Params params;
	params.FlightNo = FlightNo;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlaneComponent.SetPlaneClassPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 PlaneClassPath                 (Parm, ZeroConstructor)

void UPlaneComponent::SetPlaneClassPath(const struct FString& PlaneClassPath)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneComponent.SetPlaneClassPath");

	UPlaneComponent_SetPlaneClassPath_Params params;
	params.PlaneClassPath = PlaneClassPath;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlaneComponent.SetFlight
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// int                            FlightNo                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 StartLoc                       (Parm, OutParm, IsPlainOldData)
// struct FVector                 TargetLoc                      (Parm, OutParm, IsPlainOldData)
// struct FVector2D               CanJumpLoc                     (Parm, OutParm, IsPlainOldData)
// struct FVector2D               ForceJumpLoc                   (Parm, OutParm, IsPlainOldData)
// float                          PlaneSpeed                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          PlaneHeight                    (Parm, ZeroConstructor, IsPlainOldData)

void UPlaneComponent::SetFlight(int FlightNo, float PlaneSpeed, float PlaneHeight, struct FVector* TargetLoc, struct FVector2D* ForceJumpLoc, struct FVector* StartLoc, struct FVector2D* CanJumpLoc)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneComponent.SetFlight");

	UPlaneComponent_SetFlight_Params params;
	params.FlightNo = FlightNo;
	params.PlaneSpeed = PlaneSpeed;
	params.PlaneHeight = PlaneHeight;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (StartLoc != nullptr)
		*StartLoc = params.StartLoc;
	if (TargetLoc != nullptr)
		*TargetLoc = params.TargetLoc;
	if (CanJumpLoc != nullptr)
		*CanJumpLoc = params.CanJumpLoc;
	if (ForceJumpLoc != nullptr)
		*ForceJumpLoc = params.ForceJumpLoc;
}


// Function ShadowTrackerExtra.PlaneComponent.SetCustomFlight
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FVector                 StartLoc                       (Parm, OutParm, IsPlainOldData)
// struct FVector                 TargetLoc                      (Parm, OutParm, IsPlainOldData)
// struct FVector2D               CanJumpLoc                     (Parm, OutParm, IsPlainOldData)
// struct FVector2D               ForceJumpLoc                   (Parm, OutParm, IsPlainOldData)
// float                          PlaneSpeed                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          PlaneHeight                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPlaneComponent::SetCustomFlight(float PlaneSpeed, float PlaneHeight, struct FVector* StartLoc, struct FVector* TargetLoc, struct FVector2D* CanJumpLoc, struct FVector2D* ForceJumpLoc)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneComponent.SetCustomFlight");

	UPlaneComponent_SetCustomFlight_Params params;
	params.PlaneSpeed = PlaneSpeed;
	params.PlaneHeight = PlaneHeight;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (StartLoc != nullptr)
		*StartLoc = params.StartLoc;
	if (TargetLoc != nullptr)
		*TargetLoc = params.TargetLoc;
	if (CanJumpLoc != nullptr)
		*CanJumpLoc = params.CanJumpLoc;
	if (ForceJumpLoc != nullptr)
		*ForceJumpLoc = params.ForceJumpLoc;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlaneComponent.NotifyEndFlight
// (Final, Native, Public)

void UPlaneComponent::NotifyEndFlight()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneComponent.NotifyEndFlight");

	UPlaneComponent_NotifyEndFlight_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlaneComponent.AddPlayerToFlight
// (Final, Native, Public)
// Parameters:
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)
// int                            FlightNo                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlaneComponent::AddPlayerToFlight(class APlayerController* PC, int FlightNo)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlaneComponent.AddPlayerToFlight");

	UPlaneComponent_AddPlayerToFlight_Params params;
	params.PC = PC;
	params.FlightNo = FlightNo;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlanGReportEventComp.RPC_Server_Trample
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable, NetValidate)
// Parameters:
// class APawn*                   InBehemoth                     (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   InVictim                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ImpactPoint                    (ConstParm, Parm, ReferenceParm, IsPlainOldData)

void UPlanGReportEventComp::RPC_Server_Trample(class APawn* InBehemoth, class APawn* InVictim, const struct FVector& ImpactPoint)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanGReportEventComp.RPC_Server_Trample");

	UPlanGReportEventComp_RPC_Server_Trample_Params params;
	params.InBehemoth = InBehemoth;
	params.InVictim = InVictim;
	params.ImpactPoint = ImpactPoint;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlanGReportEventComp.RPC_Server_Destroy_APEXCamp
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// class APawn*                   InBehemoth                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  InAPEXCamp                     (Parm, ZeroConstructor, IsPlainOldData)

void UPlanGReportEventComp::RPC_Server_Destroy_APEXCamp(class APawn* InBehemoth, class AActor* InAPEXCamp)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanGReportEventComp.RPC_Server_Destroy_APEXCamp");

	UPlanGReportEventComp_RPC_Server_Destroy_APEXCamp_Params params;
	params.InBehemoth = InBehemoth;
	params.InAPEXCamp = InAPEXCamp;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlanGReportEventComp.ClientTrample
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class APawn*                   InBehemoth                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  InVictim                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ImpactPoint                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UPlanGReportEventComp::ClientTrample(class APawn* InBehemoth, class AActor* InVictim, const struct FVector& ImpactPoint)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanGReportEventComp.ClientTrample");

	UPlanGReportEventComp_ClientTrample_Params params;
	params.InBehemoth = InBehemoth;
	params.InVictim = InVictim;
	params.ImpactPoint = ImpactPoint;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlanGReportEventComp.ClientOpenSurroundPawnCollision
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 InStartLoc                     (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          InRadius                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           InIsOpen                       (Parm, ZeroConstructor, IsPlainOldData)

void UPlanGReportEventComp::ClientOpenSurroundPawnCollision(const struct FVector& InStartLoc, float InRadius, bool InIsOpen)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlanGReportEventComp.ClientOpenSurroundPawnCollision");

	UPlanGReportEventComp_ClientOpenSurroundPawnCollision_Params params;
	params.InStartLoc = InStartLoc;
	params.InRadius = InRadius;
	params.InIsOpen = InIsOpen;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAntiCheatManager.ReportAntiCheatDetailData
// (Final, Native, Public)

void UPlayerAntiCheatManager::ReportAntiCheatDetailData()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAntiCheatManager.ReportAntiCheatDetailData");

	UPlayerAntiCheatManager_ReportAntiCheatDetailData_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAntiCheatManager.PushWeaponAntiData
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FWeaponAntiData         NewWeaponAntiData              (Parm, OutParm)

void UPlayerAntiCheatManager::PushWeaponAntiData(struct FWeaponAntiData* NewWeaponAntiData)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAntiCheatManager.PushWeaponAntiData");

	UPlayerAntiCheatManager_PushWeaponAntiData_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (NewWeaponAntiData != nullptr)
		*NewWeaponAntiData = params.NewWeaponAntiData;
}


// Function ShadowTrackerExtra.PlayerAntiCheatManager.OnRecoverOnServer
// (Final, Native, Public)

void UPlayerAntiCheatManager::OnRecoverOnServer()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAntiCheatManager.OnRecoverOnServer");

	UPlayerAntiCheatManager_OnRecoverOnServer_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAntiCheatManager.OnPreReconnectOnServer
// (Final, Native, Public)

void UPlayerAntiCheatManager::OnPreReconnectOnServer()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAntiCheatManager.OnPreReconnectOnServer");

	UPlayerAntiCheatManager_OnPreReconnectOnServer_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAntiCheatManager.ExitParachute
// (Final, Native, Public)

void UPlayerAntiCheatManager::ExitParachute()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAntiCheatManager.ExitParachute");

	UPlayerAntiCheatManager_ExitParachute_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAntiCheatManager.EnterParachute
// (Final, Native, Public)

void UPlayerAntiCheatManager::EnterParachute()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAntiCheatManager.EnterParachute");

	UPlayerAntiCheatManager_EnterParachute_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAntiCheatManager.EnterJumping
// (Final, Native, Public)

void UPlayerAntiCheatManager::EnterJumping()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAntiCheatManager.EnterJumping");

	UPlayerAntiCheatManager_EnterJumping_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.TryReqMoveToLocationByParam
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Desc                           (Parm, IsPlainOldData)
// struct FString                 Param                          (Parm, ZeroConstructor)

void UPlayerAutoNavComponent::TryReqMoveToLocationByParam(const struct FVector& Desc, const struct FString& Param)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.TryReqMoveToLocationByParam");

	UPlayerAutoNavComponent_TryReqMoveToLocationByParam_Params params;
	params.Desc = Desc;
	params.Param = Param;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.TryReqMoveToLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Desc                           (Parm, IsPlainOldData)

void UPlayerAutoNavComponent::TryReqMoveToLocation(const struct FVector& Desc)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.TryReqMoveToLocation");

	UPlayerAutoNavComponent_TryReqMoveToLocation_Params params;
	params.Desc = Desc;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.TryReqMoveToCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 PlayerUID                      (Parm, ZeroConstructor)

void UPlayerAutoNavComponent::TryReqMoveToCharacter(const struct FString& PlayerUID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.TryReqMoveToCharacter");

	UPlayerAutoNavComponent_TryReqMoveToCharacter_Params params;
	params.PlayerUID = PlayerUID;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.TickCloseToTarget
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASTExtraPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerAutoNavComponent::TickCloseToTarget(class ASTExtraPlayerController* PC, float DeltaTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.TickCloseToTarget");

	UPlayerAutoNavComponent_TickCloseToTarget_Params params;
	params.PC = PC;
	params.DeltaTime = DeltaTime;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.StopMove
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UPlayerAutoNavComponent::StopMove()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.StopMove");

	UPlayerAutoNavComponent_StopMove_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.ServerCacheMoveToLocationByParam
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FVector                 Desc                           (Parm, IsPlainOldData)
// struct FString                 Param                          (Parm, ZeroConstructor)

void UPlayerAutoNavComponent::ServerCacheMoveToLocationByParam(const struct FVector& Desc, const struct FString& Param)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.ServerCacheMoveToLocationByParam");

	UPlayerAutoNavComponent_ServerCacheMoveToLocationByParam_Params params;
	params.Desc = Desc;
	params.Param = Param;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.ServerCacheMoveToCharacter
// (Final, Native, Public)
// Parameters:
// struct FString                 PlayerUID                      (Parm, ZeroConstructor)

void UPlayerAutoNavComponent::ServerCacheMoveToCharacter(const struct FString& PlayerUID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.ServerCacheMoveToCharacter");

	UPlayerAutoNavComponent_ServerCacheMoveToCharacter_Params params;
	params.PlayerUID = PlayerUID;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.RspGetPath
// (Final, Net, NetReliable, Native, Event, Private, HasDefaults, NetClient)
// Parameters:
// TArray<struct FVector>         RspPathPoints                  (ConstParm, Parm, ZeroConstructor, ReferenceParm)
// EPlayerAutoNavFindResult       FindResult                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 PlayerName                     (Parm, ZeroConstructor)
// struct FVector                 DestLocation                   (Parm, IsPlainOldData)

void UPlayerAutoNavComponent::RspGetPath(TArray<struct FVector> RspPathPoints, EPlayerAutoNavFindResult FindResult, const struct FString& PlayerName, const struct FVector& DestLocation)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.RspGetPath");

	UPlayerAutoNavComponent_RspGetPath_Params params;
	params.RspPathPoints = RspPathPoints;
	params.FindResult = FindResult;
	params.PlayerName = PlayerName;
	params.DestLocation = DestLocation;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.RspGetMoveOperatorCache
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// struct FPlayerAutoNavOperator  Operator                       (Parm)

void UPlayerAutoNavComponent::RspGetMoveOperatorCache(const struct FPlayerAutoNavOperator& Operator)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.RspGetMoveOperatorCache");

	UPlayerAutoNavComponent_RspGetMoveOperatorCache_Params params;
	params.Operator = Operator;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.ReqMoveToLocation
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FVector                 Desc                           (Parm, IsPlainOldData)

void UPlayerAutoNavComponent::ReqMoveToLocation(const struct FVector& Desc)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.ReqMoveToLocation");

	UPlayerAutoNavComponent_ReqMoveToLocation_Params params;
	params.Desc = Desc;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.ReqMoveToCharacter
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// struct FString                 PlayerUID                      (Parm, ZeroConstructor)

void UPlayerAutoNavComponent::ReqMoveToCharacter(const struct FString& PlayerUID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.ReqMoveToCharacter");

	UPlayerAutoNavComponent_ReqMoveToCharacter_Params params;
	params.PlayerUID = PlayerUID;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.ReqMoveOperatorCache
// (Final, Net, NetReliable, Native, Event, Private, NetServer, BlueprintCallable, NetValidate)

void UPlayerAutoNavComponent::ReqMoveOperatorCache()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.ReqMoveOperatorCache");

	UPlayerAutoNavComponent_ReqMoveOperatorCache_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.OnStartAutoMove
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASTExtraPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerAutoNavComponent::OnStartAutoMove(class ASTExtraPlayerController* PC)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.OnStartAutoMove");

	UPlayerAutoNavComponent_OnStartAutoMove_Params params;
	params.PC = PC;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.GetNearestShootingMachineLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UPlayerAutoNavComponent::GetNearestShootingMachineLocation()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.GetNearestShootingMachineLocation");

	UPlayerAutoNavComponent_GetNearestShootingMachineLocation_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.GetMoveParam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UPlayerAutoNavComponent::GetMoveParam()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.GetMoveParam");

	UPlayerAutoNavComponent_GetMoveParam_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.CheckCharacterPoseState
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASTExtraPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlayerAutoNavComponent::CheckCharacterPoseState(class ASTExtraPlayerController* PC)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.CheckCharacterPoseState");

	UPlayerAutoNavComponent_CheckCharacterPoseState_Params params;
	params.PC = PC;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerAutoNavComponent.BPOnRequestMove
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// EPlayerAutoNavMode             CurMode                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 TargetParam                    (Parm, ZeroConstructor)
// struct FVector                 TargetLoc                      (Parm, IsPlainOldData)

void UPlayerAutoNavComponent::BPOnRequestMove(EPlayerAutoNavMode CurMode, const struct FString& TargetParam, const struct FVector& TargetLoc)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerAutoNavComponent.BPOnRequestMove");

	UPlayerAutoNavComponent_BPOnRequestMove_Params params;
	params.CurMode = CurMode;
	params.TargetParam = TargetParam;
	params.TargetLoc = TargetLoc;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerControllerChangePawnComp.SetChangeCharacterState
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EChangeCharacterState> NewChangeState                 (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerControllerChangePawnComp::SetChangeCharacterState(TEnumAsByte<EChangeCharacterState> NewChangeState)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerControllerChangePawnComp.SetChangeCharacterState");

	UPlayerControllerChangePawnComp_SetChangeCharacterState_Params params;
	params.NewChangeState = NewChangeState;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerControllerChangePawnComp.SetCacheReceiveRespawnZombie
// (Final, Native, Public)
// Parameters:
// bool                           isReceive                      (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerControllerChangePawnComp::SetCacheReceiveRespawnZombie(bool isReceive)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerControllerChangePawnComp.SetCacheReceiveRespawnZombie");

	UPlayerControllerChangePawnComp_SetCacheReceiveRespawnZombie_Params params;
	params.isReceive = isReceive;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerControllerChangePawnComp.RPC_Server_ChangeToInfection
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// ECharacterSubType              PawnSubType                    (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerControllerChangePawnComp::RPC_Server_ChangeToInfection(ECharacterSubType PawnSubType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerControllerChangePawnComp.RPC_Server_ChangeToInfection");

	UPlayerControllerChangePawnComp_RPC_Server_ChangeToInfection_Params params;
	params.PawnSubType = PawnSubType;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerControllerChangePawnComp.RPC_Client_ZombieRespawn
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// ECharacterSubType              PawnSubType                    (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerControllerChangePawnComp::RPC_Client_ZombieRespawn(ECharacterSubType PawnSubType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerControllerChangePawnComp.RPC_Client_ZombieRespawn");

	UPlayerControllerChangePawnComp_RPC_Client_ZombieRespawn_Params params;
	params.PawnSubType = PawnSubType;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerControllerChangePawnComp.RPC_Client_BeforeChangeCharacter
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// ECharacterSubType              TargetPawnType                 (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerControllerChangePawnComp::RPC_Client_BeforeChangeCharacter(ECharacterSubType TargetPawnType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerControllerChangePawnComp.RPC_Client_BeforeChangeCharacter");

	UPlayerControllerChangePawnComp_RPC_Client_BeforeChangeCharacter_Params params;
	params.TargetPawnType = TargetPawnType;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerControllerChangePawnComp.RPC_Client_AfterChangeCharacter
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// ECharacterSubType              TargetPawnType                 (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerControllerChangePawnComp::RPC_Client_AfterChangeCharacter(ECharacterSubType TargetPawnType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerControllerChangePawnComp.RPC_Client_AfterChangeCharacter");

	UPlayerControllerChangePawnComp_RPC_Client_AfterChangeCharacter_Params params;
	params.TargetPawnType = TargetPawnType;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerControllerChangePawnComp.PlayFirstChangeToZombieEffect
// (Final, Native, Public)

void UPlayerControllerChangePawnComp::PlayFirstChangeToZombieEffect()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerControllerChangePawnComp.PlayFirstChangeToZombieEffect");

	UPlayerControllerChangePawnComp_PlayFirstChangeToZombieEffect_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerControllerChangePawnComp.PlayChangeToAvengerEffect
// (Final, Native, Public)

void UPlayerControllerChangePawnComp::PlayChangeToAvengerEffect()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerControllerChangePawnComp.PlayChangeToAvengerEffect");

	UPlayerControllerChangePawnComp_PlayChangeToAvengerEffect_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerControllerChangePawnComp.OnRep_ChangeTargetPawnType
// (Final, Native, Public)

void UPlayerControllerChangePawnComp::OnRep_ChangeTargetPawnType()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerControllerChangePawnComp.OnRep_ChangeTargetPawnType");

	UPlayerControllerChangePawnComp_OnRep_ChangeTargetPawnType_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerControllerChangePawnComp.IsChangeCharForbidenSetViewTarget
// (Final, Native, Public)
// Parameters:
// bool                           Check                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlayerControllerChangePawnComp::IsChangeCharForbidenSetViewTarget(bool Check)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerControllerChangePawnComp.IsChangeCharForbidenSetViewTarget");

	UPlayerControllerChangePawnComp_IsChangeCharForbidenSetViewTarget_Params params;
	params.Check = Check;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerControllerChangePawnComp.IsCacheReceiveRespawnZombie
// (Final, Native, Public)
// Parameters:
// bool                           bCheck                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlayerControllerChangePawnComp::IsCacheReceiveRespawnZombie(bool bCheck)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerControllerChangePawnComp.IsCacheReceiveRespawnZombie");

	UPlayerControllerChangePawnComp_IsCacheReceiveRespawnZombie_Params params;
	params.bCheck = bCheck;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerControllerChangePawnComp.DelayCallRespawnSelectZombie
// (Final, Native, Public)

void UPlayerControllerChangePawnComp::DelayCallRespawnSelectZombie()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerControllerChangePawnComp.DelayCallRespawnSelectZombie");

	UPlayerControllerChangePawnComp_DelayCallRespawnSelectZombie_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerControllerChangePawnComp.BeforeChangeCharacter
// (Final, Native, Public)
// Parameters:
// ECharacterSubType              TargetPawnType                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsDirectlyChange               (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerControllerChangePawnComp::BeforeChangeCharacter(ECharacterSubType TargetPawnType, bool IsDirectlyChange)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerControllerChangePawnComp.BeforeChangeCharacter");

	UPlayerControllerChangePawnComp_BeforeChangeCharacter_Params params;
	params.TargetPawnType = TargetPawnType;
	params.IsDirectlyChange = IsDirectlyChange;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerGunCollosionComp.SetEffect
// (Native, Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// bool                           Visbile                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 EffectLoc                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UPlayerGunCollosionComp::SetEffect(bool Visbile, const struct FVector& EffectLoc)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerGunCollosionComp.SetEffect");

	UPlayerGunCollosionComp_SetEffect_Params params;
	params.Visbile = Visbile;
	params.EffectLoc = EffectLoc;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerGunCollosionComp.CheckCollision
// (Native, Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// int                            InFoldFactor                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 FoldPoint                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 FoldNormal                     (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UPlayerGunCollosionComp::CheckCollision(int InFoldFactor, const struct FVector& FoldPoint, const struct FVector& FoldNormal)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerGunCollosionComp.CheckCollision");

	UPlayerGunCollosionComp_CheckCollision_Params params;
	params.InFoldFactor = InFoldFactor;
	params.FoldPoint = FoldPoint;
	params.FoldNormal = FoldNormal;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerHunterRevivalComponent.ShowSelfRevivalTombBoxSkin
// (Final, Native, Private)
// Parameters:
// class UObject*                 InFocusTarget                  (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerHunterRevivalComponent::ShowSelfRevivalTombBoxSkin(class UObject* InFocusTarget)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerHunterRevivalComponent.ShowSelfRevivalTombBoxSkin");

	UPlayerHunterRevivalComponent_ShowSelfRevivalTombBoxSkin_Params params;
	params.InFocusTarget = InFocusTarget;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerHunterRevivalComponent.OnPlayerShopRevived
// (Final, Native, Public)
// Parameters:
// class ASTExtraPlayerController* SaviorPC                       (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerHunterRevivalComponent::OnPlayerShopRevived(class ASTExtraPlayerController* SaviorPC)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerHunterRevivalComponent.OnPlayerShopRevived");

	UPlayerHunterRevivalComponent_OnPlayerShopRevived_Params params;
	params.SaviorPC = SaviorPC;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerHunterRevivalComponent.OnPlayerSelfRevived
// (Final, Native, Public)
// Parameters:
// class ASTExtraPlayerController* SaviorPC                       (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerHunterRevivalComponent::OnPlayerSelfRevived(class ASTExtraPlayerController* SaviorPC)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerHunterRevivalComponent.OnPlayerSelfRevived");

	UPlayerHunterRevivalComponent_OnPlayerSelfRevived_Params params;
	params.SaviorPC = SaviorPC;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerHunterRevivalComponent.OnPlayerQuitSpectating
// (Final, Native, Public)

void UPlayerHunterRevivalComponent::OnPlayerQuitSpectating()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerHunterRevivalComponent.OnPlayerQuitSpectating");

	UPlayerHunterRevivalComponent_OnPlayerQuitSpectating_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerHunterRevivalComponent.OnPlayerGotoSpectating
// (Final, Native, Public)

void UPlayerHunterRevivalComponent::OnPlayerGotoSpectating()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerHunterRevivalComponent.OnPlayerGotoSpectating");

	UPlayerHunterRevivalComponent_OnPlayerGotoSpectating_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerHunterRevivalComponent.OnPlayerExitGame
// (Final, Native, Public)

void UPlayerHunterRevivalComponent::OnPlayerExitGame()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerHunterRevivalComponent.OnPlayerExitGame");

	UPlayerHunterRevivalComponent_OnPlayerExitGame_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerHunterRevivalComponent.OnPlayerEscapeWhenGameEnd
// (Final, Native, Public)
// Parameters:
// bool                           bIsPlayerAlive                 (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerHunterRevivalComponent::OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerHunterRevivalComponent.OnPlayerEscapeWhenGameEnd");

	UPlayerHunterRevivalComponent_OnPlayerEscapeWhenGameEnd_Params params;
	params.bIsPlayerAlive = bIsPlayerAlive;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerHunterRevivalComponent.LeaveShopReivalState
// (Final, Native, Public)
// Parameters:
// uint32_t                       SaviorKey                      (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerHunterRevivalComponent::LeaveShopReivalState(uint32_t SaviorKey)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerHunterRevivalComponent.LeaveShopReivalState");

	UPlayerHunterRevivalComponent_LeaveShopReivalState_Params params;
	params.SaviorKey = SaviorKey;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerHunterRevivalComponent.LeaveSelfReivalState
// (Final, Native, Public)
// Parameters:
// uint32_t                       SaviorKey                      (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerHunterRevivalComponent::LeaveSelfReivalState(uint32_t SaviorKey)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerHunterRevivalComponent.LeaveSelfReivalState");

	UPlayerHunterRevivalComponent_LeaveSelfReivalState_Params params;
	params.SaviorKey = SaviorKey;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerHunterRevivalComponent.IsInWaittingRevivalState
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlayerHunterRevivalComponent::IsInWaittingRevivalState()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerHunterRevivalComponent.IsInWaittingRevivalState");

	UPlayerHunterRevivalComponent_IsInWaittingRevivalState_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerHunterRevivalComponent.EnterShopRevivalState
// (Final, Native, Public)

void UPlayerHunterRevivalComponent::EnterShopRevivalState()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerHunterRevivalComponent.EnterShopRevivalState");

	UPlayerHunterRevivalComponent_EnterShopRevivalState_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerHunterRevivalComponent.EnterSelfRevivalState
// (Final, Native, Public)

void UPlayerHunterRevivalComponent::EnterSelfRevivalState()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerHunterRevivalComponent.EnterSelfRevivalState");

	UPlayerHunterRevivalComponent_EnterSelfRevivalState_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerHunterRevivalComponent.EnterRevivalState
// (Final, Native, Public)

void UPlayerHunterRevivalComponent::EnterRevivalState()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerHunterRevivalComponent.EnterRevivalState");

	UPlayerHunterRevivalComponent_EnterRevivalState_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerHunterRevivalComponent.CanSelfRevival
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlayerHunterRevivalComponent::CanSelfRevival()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerHunterRevivalComponent.CanSelfRevival");

	UPlayerHunterRevivalComponent_CanSelfRevival_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.VaultLeave
// (Final, Native, Public)
// Parameters:
// EPawnState                     State                          (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::VaultLeave(EPawnState State)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.VaultLeave");

	UPlayerMantleComponent_VaultLeave_Params params;
	params.State = State;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.VaultFromCPP
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlayerMantleComponent::VaultFromCPP()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.VaultFromCPP");

	UPlayerMantleComponent_VaultFromCPP_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.VaultFail
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FString                 Reason                         (Parm, ZeroConstructor)

void UPlayerMantleComponent::VaultFail(const struct FString& Reason)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.VaultFail");

	UPlayerMantleComponent_VaultFail_Params params;
	params.Reason = Reason;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.UpdateVault_BluePrint
// (Native, Event, Public, BlueprintEvent)

void UPlayerMantleComponent::UpdateVault_BluePrint()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.UpdateVault_BluePrint");

	UPlayerMantleComponent_UpdateVault_BluePrint_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.UpdatePosition
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UPlayerMantleComponent::UpdatePosition()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.UpdatePosition");

	UPlayerMantleComponent_UpdatePosition_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.UpdateMontageSpeed
// (Final, Native, Public, BlueprintCallable)

void UPlayerMantleComponent::UpdateMontageSpeed()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.UpdateMontageSpeed");

	UPlayerMantleComponent_UpdateMontageSpeed_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.TpsVaultUpdate
// (Final, Native, Public, BlueprintCallable)

void UPlayerMantleComponent::TpsVaultUpdate()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.TpsVaultUpdate");

	UPlayerMantleComponent_TpsVaultUpdate_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.StopVaultAndReverse
// (Final, Native, Public, BlueprintCallable)

void UPlayerMantleComponent::StopVaultAndReverse()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.StopVaultAndReverse");

	UPlayerMantleComponent_StopVaultAndReverse_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.StartVault
// (Final, Native, Public, BlueprintCallable)

void UPlayerMantleComponent::StartVault()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.StartVault");

	UPlayerMantleComponent_StartVault_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.StartAsyncLoadVaultAnimRes
// (Final, Native, Public)
// Parameters:
// bool                           IsTDM                          (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::StartAsyncLoadVaultAnimRes(bool IsTDM)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.StartAsyncLoadVaultAnimRes");

	UPlayerMantleComponent_StartAsyncLoadVaultAnimRes_Params params;
	params.IsTDM = IsTDM;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.StartAsyncLoadTeamVaultAnimRes
// (Native, Public)

void UPlayerMantleComponent::StartAsyncLoadTeamVaultAnimRes()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.StartAsyncLoadTeamVaultAnimRes");

	UPlayerMantleComponent_StartAsyncLoadTeamVaultAnimRes_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.SetVaultData
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          dis                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 VaultKey                       (Parm, ZeroConstructor)
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// class AActor*                  InCheckActor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossmaxFalling                (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossmaxDis                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InHitPoint                     (Parm, IsPlainOldData)
// struct FRotator                movedir                        (Parm, IsPlainOldData)

void UPlayerMantleComponent::SetVaultData(float dis, float Height, float Length, const struct FString& VaultKey, const struct FVector& StartPos, class AActor* InCheckActor, float crossmaxFalling, float crossmaxDis, const struct FVector& InHitPoint, const struct FRotator& movedir)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.SetVaultData");

	UPlayerMantleComponent_SetVaultData_Params params;
	params.dis = dis;
	params.Height = Height;
	params.Length = Length;
	params.VaultKey = VaultKey;
	params.StartPos = StartPos;
	params.InCheckActor = InCheckActor;
	params.crossmaxFalling = crossmaxFalling;
	params.crossmaxDis = crossmaxDis;
	params.InHitPoint = InHitPoint;
	params.movedir = movedir;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.SetPlayerStartPositionInternal
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 InStartPosition                (Parm, IsPlainOldData)
// bool                           UseInputStart                  (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::SetPlayerStartPositionInternal(const struct FVector& InStartPosition, bool UseInputStart)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.SetPlayerStartPositionInternal");

	UPlayerMantleComponent_SetPlayerStartPositionInternal_Params params;
	params.InStartPosition = InStartPosition;
	params.UseInputStart = UseInputStart;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.SetNowUseFpsVault
// (Final, Native, Public, BlueprintCallable)

void UPlayerMantleComponent::SetNowUseFpsVault()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.SetNowUseFpsVault");

	UPlayerMantleComponent_SetNowUseFpsVault_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.SetLimitPostion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          XValue                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ZValue                         (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::SetLimitPostion(float XValue, float ZValue)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.SetLimitPostion");

	UPlayerMantleComponent_SetLimitPostion_Params params;
	params.XValue = XValue;
	params.ZValue = ZValue;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.SetEnd
// (Final, Native, Public, BlueprintCallable)

void UPlayerMantleComponent::SetEnd()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.SetEnd");

	UPlayerMantleComponent_SetEnd_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.ServerRPC_VaultServer
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable, NetValidate)
// Parameters:
// float                          dis                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 VaultKey                       (Parm, ZeroConstructor)
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// class AActor*                  InCheckActor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxFall              (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxDis               (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InHitPoint                     (Parm, IsPlainOldData)
// class AActor*                  WindowActor                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                movedir                        (Parm, IsPlainOldData)

void UPlayerMantleComponent::ServerRPC_VaultServer(float dis, float Height, float Length, const struct FString& VaultKey, const struct FVector& StartPos, class AActor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, const struct FVector& InHitPoint, class AActor* WindowActor, const struct FRotator& movedir)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.ServerRPC_VaultServer");

	UPlayerMantleComponent_ServerRPC_VaultServer_Params params;
	params.dis = dis;
	params.Height = Height;
	params.Length = Length;
	params.VaultKey = VaultKey;
	params.StartPos = StartPos;
	params.InCheckActor = InCheckActor;
	params.crossblockMaxFall = crossblockMaxFall;
	params.crossblockMaxDis = crossblockMaxDis;
	params.InHitPoint = InHitPoint;
	params.WindowActor = WindowActor;
	params.movedir = movedir;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.ServerRPC_StopVault
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)

void UPlayerMantleComponent::ServerRPC_StopVault()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.ServerRPC_StopVault");

	UPlayerMantleComponent_ServerRPC_StopVault_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.ServerRPC_FpsVaultServer
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable, NetValidate)
// Parameters:
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// struct FVector                 topPos                         (Parm, IsPlainOldData)
// float                          crossblockMaxFall              (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxDis               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           isjump                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                movedir                        (Parm, IsPlainOldData)
// float                          blobkthick                     (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::ServerRPC_FpsVaultServer(const struct FVector& StartPos, const struct FVector& topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, const struct FRotator& movedir, float blobkthick)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.ServerRPC_FpsVaultServer");

	UPlayerMantleComponent_ServerRPC_FpsVaultServer_Params params;
	params.StartPos = StartPos;
	params.topPos = topPos;
	params.crossblockMaxFall = crossblockMaxFall;
	params.crossblockMaxDis = crossblockMaxDis;
	params.isjump = isjump;
	params.movedir = movedir;
	params.blobkthick = blobkthick;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.ServerFpsVaultBlockDisCheck
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// struct FVector                 topPos                         (Parm, IsPlainOldData)
// bool                           Result                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::ServerFpsVaultBlockDisCheck(const struct FVector& StartPos, const struct FVector& topPos, bool* Result)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.ServerFpsVaultBlockDisCheck");

	UPlayerMantleComponent_ServerFpsVaultBlockDisCheck_Params params;
	params.StartPos = StartPos;
	params.topPos = topPos;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.ServerCrossingBlockCheck
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// float                          blockdis                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          blockheight                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                movedir                        (Parm, IsPlainOldData)
// bool                           Result                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::ServerCrossingBlockCheck(const struct FVector& StartPos, float blockdis, float blockheight, const struct FRotator& movedir, bool* Result)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.ServerCrossingBlockCheck");

	UPlayerMantleComponent_ServerCrossingBlockCheck_Params params;
	params.StartPos = StartPos;
	params.blockdis = blockdis;
	params.blockheight = blockheight;
	params.movedir = movedir;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.ServerBlockDisCheck
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InHitPoint                     (Parm, IsPlainOldData)
// struct FString                 Key                            (Parm, ZeroConstructor)
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// float                          blockdis                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          blockheight                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlockLength                    (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  InCheckActor                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Result                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::ServerBlockDisCheck(const struct FVector& InHitPoint, const struct FString& Key, const struct FVector& StartPos, float blockdis, float blockheight, float BlockLength, class AActor* InCheckActor, bool* Result)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.ServerBlockDisCheck");

	UPlayerMantleComponent_ServerBlockDisCheck_Params params;
	params.InHitPoint = InHitPoint;
	params.Key = Key;
	params.StartPos = StartPos;
	params.blockdis = blockdis;
	params.blockheight = blockheight;
	params.BlockLength = BlockLength;
	params.InCheckActor = InCheckActor;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.PredictAutoVault
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          blockdis                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BlockNormalDir                 (Parm, IsPlainOldData)

void UPlayerMantleComponent::PredictAutoVault(float blockdis, const struct FVector& BlockNormalDir)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.PredictAutoVault");

	UPlayerMantleComponent_PredictAutoVault_Params params;
	params.blockdis = blockdis;
	params.BlockNormalDir = BlockNormalDir;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.OnRespawned_BlueprintImpl
// (Event, Public, BlueprintEvent)

void UPlayerMantleComponent::OnRespawned_BlueprintImpl()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.OnRespawned_BlueprintImpl");

	UPlayerMantleComponent_OnRespawned_BlueprintImpl_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.MulticastRPC_VaultFail
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)
// Parameters:
// struct FString                 Reason                         (Parm, ZeroConstructor)

void UPlayerMantleComponent::MulticastRPC_VaultFail(const struct FString& Reason)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.MulticastRPC_VaultFail");

	UPlayerMantleComponent_MulticastRPC_VaultFail_Params params;
	params.Reason = Reason;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.MulticastRPC_VaultAll
// (Net, NetReliable, Native, Event, NetMulticast, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          dis                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 VaultKey                       (Parm, ZeroConstructor)
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// class AActor*                  InCheckActor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxFall              (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxDis               (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InHitPoint                     (Parm, IsPlainOldData)
// struct FRotator                movedir                        (Parm, IsPlainOldData)

void UPlayerMantleComponent::MulticastRPC_VaultAll(float dis, float Height, float Length, const struct FString& VaultKey, const struct FVector& StartPos, class AActor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, const struct FVector& InHitPoint, const struct FRotator& movedir)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.MulticastRPC_VaultAll");

	UPlayerMantleComponent_MulticastRPC_VaultAll_Params params;
	params.dis = dis;
	params.Height = Height;
	params.Length = Length;
	params.VaultKey = VaultKey;
	params.StartPos = StartPos;
	params.InCheckActor = InCheckActor;
	params.crossblockMaxFall = crossblockMaxFall;
	params.crossblockMaxDis = crossblockMaxDis;
	params.InHitPoint = InHitPoint;
	params.movedir = movedir;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.MulticastRPC_StopVault
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)

void UPlayerMantleComponent::MulticastRPC_StopVault()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.MulticastRPC_StopVault");

	UPlayerMantleComponent_MulticastRPC_StopVault_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.MulticastRPC_FpsVaultToAll
// (Net, NetReliable, Native, Event, NetMulticast, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// struct FVector                 topPos                         (Parm, IsPlainOldData)
// float                          crossblockMaxFall              (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxDis               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           isjump                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                movedir                        (Parm, IsPlainOldData)
// float                          blobkthick                     (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::MulticastRPC_FpsVaultToAll(const struct FVector& StartPos, const struct FVector& topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, const struct FRotator& movedir, float blobkthick)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.MulticastRPC_FpsVaultToAll");

	UPlayerMantleComponent_MulticastRPC_FpsVaultToAll_Params params;
	params.StartPos = StartPos;
	params.topPos = topPos;
	params.crossblockMaxFall = crossblockMaxFall;
	params.crossblockMaxDis = crossblockMaxDis;
	params.isjump = isjump;
	params.movedir = movedir;
	params.blobkthick = blobkthick;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.LeaveAvoidSimulateCharacterShake
// (Final, Native, Public, BlueprintCallable)

void UPlayerMantleComponent::LeaveAvoidSimulateCharacterShake()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.LeaveAvoidSimulateCharacterShake");

	UPlayerMantleComponent_LeaveAvoidSimulateCharacterShake_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.JumpVaultCheck
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           Result                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::JumpVaultCheck(bool* Result)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.JumpVaultCheck");

	UPlayerMantleComponent_JumpVaultCheck_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.jumpFromUI
// (Final, Native, Public, BlueprintCallable)

void UPlayerMantleComponent::jumpFromUI()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.jumpFromUI");

	UPlayerMantleComponent_jumpFromUI_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.IsVaultOnBase
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           ShouldVault                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::IsVaultOnBase(bool* ShouldVault)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.IsVaultOnBase");

	UPlayerMantleComponent_IsVaultOnBase_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (ShouldVault != nullptr)
		*ShouldVault = params.ShouldVault;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.IsValidVault
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           IsValid                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::IsValidVault(bool* IsValid)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.IsValidVault");

	UPlayerMantleComponent_IsValidVault_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (IsValid != nullptr)
		*IsValid = params.IsValid;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.GetVaultKeyByBlockHeight
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UPlayerMantleComponent::GetVaultKeyByBlockHeight(float Height)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.GetVaultKeyByBlockHeight");

	UPlayerMantleComponent_GetVaultKeyByBlockHeight_Params params;
	params.Height = Height;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.GetRelicateRotator
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FRotator UPlayerMantleComponent::GetRelicateRotator()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.GetRelicateRotator");

	UPlayerMantleComponent_GetRelicateRotator_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.GetRealStartZHeight
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// float                          ResStartZ                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::GetRealStartZHeight(float* ResStartZ)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.GetRealStartZHeight");

	UPlayerMantleComponent_GetRealStartZHeight_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (ResStartZ != nullptr)
		*ResStartZ = params.ResStartZ;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.GetPlayerStartPositionInternal
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// bool                           bRelationLoc                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 StartPos                       (Parm, OutParm, IsPlainOldData)

void UPlayerMantleComponent::GetPlayerStartPositionInternal(bool bRelationLoc, struct FVector* StartPos)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.GetPlayerStartPositionInternal");

	UPlayerMantleComponent_GetPlayerStartPositionInternal_Params params;
	params.bRelationLoc = bRelationLoc;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (StartPos != nullptr)
		*StartPos = params.StartPos;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.GetNowOppSideDis
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Result                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::GetNowOppSideDis(float* Result)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.GetNowOppSideDis");

	UPlayerMantleComponent_GetNowOppSideDis_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.GetNowData
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           IsInFalling                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsGet                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::GetNowData(bool IsInFalling, bool* IsGet)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.GetNowData");

	UPlayerMantleComponent_GetNowData_Params params;
	params.IsInFalling = IsInFalling;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (IsGet != nullptr)
		*IsGet = params.IsGet;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.GetDataStartPosition
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 StartPos                       (Parm, OutParm, IsPlainOldData)

void UPlayerMantleComponent::GetDataStartPosition(struct FVector* StartPos)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.GetDataStartPosition");

	UPlayerMantleComponent_GetDataStartPosition_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (StartPos != nullptr)
		*StartPos = params.StartPos;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.GetCurHeightToLand
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPlayerMantleComponent::GetCurHeightToLand()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.GetCurHeightToLand");

	UPlayerMantleComponent_GetCurHeightToLand_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.GetCrossMaxBlockDisOffset
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           Result                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::GetCrossMaxBlockDisOffset(bool* Result)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.GetCrossMaxBlockDisOffset");

	UPlayerMantleComponent_GetCrossMaxBlockDisOffset_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.GetCrossMaxBlockDisForward
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           Result                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::GetCrossMaxBlockDisForward(bool* Result)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.GetCrossMaxBlockDisForward");

	UPlayerMantleComponent_GetCrossMaxBlockDisForward_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.GetCrossBlockMaxFallingHeight
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           Result                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::GetCrossBlockMaxFallingHeight(bool* Result)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.GetCrossBlockMaxFallingHeight");

	UPlayerMantleComponent_GetCrossBlockMaxFallingHeight_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.FpsVaultUpdate
// (Final, Native, Public, BlueprintCallable)

void UPlayerMantleComponent::FpsVaultUpdate()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.FpsVaultUpdate");

	UPlayerMantleComponent_FpsVaultUpdate_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.FpsVaultToAll
// (Native, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// struct FVector                 topPos                         (Parm, IsPlainOldData)
// float                          crossblockMaxFall              (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxDis               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsjump                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                movedir                        (Parm, IsPlainOldData)
// float                          blobkthick                     (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::FpsVaultToAll(const struct FVector& StartPos, const struct FVector& topPos, float crossblockMaxFall, float crossblockMaxDis, bool bIsjump, const struct FRotator& movedir, float blobkthick)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.FpsVaultToAll");

	UPlayerMantleComponent_FpsVaultToAll_Params params;
	params.StartPos = StartPos;
	params.topPos = topPos;
	params.crossblockMaxFall = crossblockMaxFall;
	params.crossblockMaxDis = crossblockMaxDis;
	params.bIsjump = bIsjump;
	params.movedir = movedir;
	params.blobkthick = blobkthick;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.FpsVaultStart
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// struct FVector                 topPos                         (Parm, IsPlainOldData)
// float                          OffsetMaxX                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          OffsetMaxY                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsjump                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                InPlayerRotation               (Parm, IsPlainOldData)
// float                          BlockLength                    (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::FpsVaultStart(const struct FVector& StartPos, const struct FVector& topPos, float OffsetMaxX, float OffsetMaxY, bool bIsjump, const struct FRotator& InPlayerRotation, float BlockLength)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.FpsVaultStart");

	UPlayerMantleComponent_FpsVaultStart_Params params;
	params.StartPos = StartPos;
	params.topPos = topPos;
	params.OffsetMaxX = OffsetMaxX;
	params.OffsetMaxY = OffsetMaxY;
	params.bIsjump = bIsjump;
	params.InPlayerRotation = InPlayerRotation;
	params.BlockLength = BlockLength;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.FpsVaultServer
// (Native, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// struct FVector                 topPos                         (Parm, IsPlainOldData)
// float                          crossblockMaxFall              (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxDis               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsjump                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                movedir                        (Parm, IsPlainOldData)
// float                          blobkthick                     (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::FpsVaultServer(const struct FVector& StartPos, const struct FVector& topPos, float crossblockMaxFall, float crossblockMaxDis, bool bIsjump, const struct FRotator& movedir, float blobkthick)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.FpsVaultServer");

	UPlayerMantleComponent_FpsVaultServer_Params params;
	params.StartPos = StartPos;
	params.topPos = topPos;
	params.crossblockMaxFall = crossblockMaxFall;
	params.crossblockMaxDis = crossblockMaxDis;
	params.bIsjump = bIsjump;
	params.movedir = movedir;
	params.blobkthick = blobkthick;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.ForwardTestObjectType
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Result                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::ForwardTestObjectType(class AActor* Actor, bool* Result)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.ForwardTestObjectType");

	UPlayerMantleComponent_ForwardTestObjectType_Params params;
	params.Actor = Actor;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.EnterAvoidSimulateCharacterShake
// (Final, Native, Public, BlueprintCallable)

void UPlayerMantleComponent::EnterAvoidSimulateCharacterShake()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.EnterAvoidSimulateCharacterShake");

	UPlayerMantleComponent_EnterAvoidSimulateCharacterShake_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.EnableCulling
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::EnableCulling(bool bEnable)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.EnableCulling");

	UPlayerMantleComponent_EnableCulling_Params params;
	params.bEnable = bEnable;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.DealBrokenWindows
// (Final, Native, Public, BlueprintCallable)

void UPlayerMantleComponent::DealBrokenWindows()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.DealBrokenWindows");

	UPlayerMantleComponent_DealBrokenWindows_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.CheckVaultWindows
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 CheckStart                     (Parm, IsPlainOldData)
// struct FVector                 CheckEnd                       (Parm, IsPlainOldData)

void UPlayerMantleComponent::CheckVaultWindows(const struct FVector& CheckStart, const struct FVector& CheckEnd)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.CheckVaultWindows");

	UPlayerMantleComponent_CheckVaultWindows_Params params;
	params.CheckStart = CheckStart;
	params.CheckEnd = CheckEnd;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.CheckUpLengthBlock
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           Result                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::CheckUpLengthBlock(bool* Result)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.CheckUpLengthBlock");

	UPlayerMantleComponent_CheckUpLengthBlock_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.CheckNowisJumpAnimation
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          thcikLength                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Result                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ishasAnimation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::CheckNowisJumpAnimation(float Height, float thcikLength, bool* Result, bool* ishasAnimation)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.CheckNowisJumpAnimation");

	UPlayerMantleComponent_CheckNowisJumpAnimation_Params params;
	params.Height = Height;
	params.thcikLength = thcikLength;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;
	if (ishasAnimation != nullptr)
		*ishasAnimation = params.ishasAnimation;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.CheckIsValidByHeightCheckDis
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          nowheight                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          checkDis                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsValid                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::CheckIsValidByHeightCheckDis(float nowheight, float checkDis, bool* IsValid)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.CheckIsValidByHeightCheckDis");

	UPlayerMantleComponent_CheckIsValidByHeightCheckDis_Params params;
	params.nowheight = nowheight;
	params.checkDis = checkDis;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (IsValid != nullptr)
		*IsValid = params.IsValid;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.CheckHeight
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsActive                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Point                          (Parm, OutParm, IsPlainOldData)

void UPlayerMantleComponent::CheckHeight(float Height, bool* IsActive, struct FVector* Point)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.CheckHeight");

	UPlayerMantleComponent_CheckHeight_Params params;
	params.Height = Height;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (IsActive != nullptr)
		*IsActive = params.IsActive;
	if (Point != nullptr)
		*Point = params.Point;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.CheckForward
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           IsActive                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::CheckForward(bool* IsActive)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.CheckForward");

	UPlayerMantleComponent_CheckForward_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (IsActive != nullptr)
		*IsActive = params.IsActive;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.CheckCanVault
// (Native, Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           IsActive                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::CheckCanVault(bool* IsActive)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.CheckCanVault");

	UPlayerMantleComponent_CheckCanVault_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (IsActive != nullptr)
		*IsActive = params.IsActive;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.CheckCanStandOn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlayerMantleComponent::CheckCanStandOn()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.CheckCanStandOn");

	UPlayerMantleComponent_CheckCanStandOn_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.CacultLimitData
// (Final, Native, Public, BlueprintCallable)

void UPlayerMantleComponent::CacultLimitData()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.CacultLimitData");

	UPlayerMantleComponent_CacultLimitData_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.AutoVaultInternal
// (Final, Native, Public, BlueprintCallable)

void UPlayerMantleComponent::AutoVaultInternal()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.AutoVaultInternal");

	UPlayerMantleComponent_AutoVaultInternal_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.AutoVault
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class ASTExtraBaseCharacter*   Char                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              Impact                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UPlayerMantleComponent::AutoVault(class ASTExtraBaseCharacter* Char, const struct FHitResult& Impact)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.AutoVault");

	UPlayerMantleComponent_AutoVault_Params params;
	params.Char = Char;
	params.Impact = Impact;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerMantleComponent.AsyncLoadVaultAnimResFinish
// (Final, Native, Public)
// Parameters:
// unsigned char                  PawnSubType                    (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerMantleComponent::AsyncLoadVaultAnimResFinish(unsigned char PawnSubType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerMantleComponent.AsyncLoadVaultAnimResFinish");

	UPlayerMantleComponent_AsyncLoadVaultAnimResFinish_Params params;
	params.PawnSubType = PawnSubType;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRemainTombBox.OnRep_IsSearchedRemainBox
// (Final, Native, Public)

void APlayerRemainTombBox::OnRep_IsSearchedRemainBox()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRemainTombBox.OnRep_IsSearchedRemainBox");

	APlayerRemainTombBox_OnRep_IsSearchedRemainBox_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRemainTombBox.HandleBoxIsSearched
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void APlayerRemainTombBox::HandleBoxIsSearched()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRemainTombBox.HandleBoxIsSearched");

	APlayerRemainTombBox_HandleBoxIsSearched_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRespawnComponent.SetRespawnInvincibleTime
// (Final, Native, Public)
// Parameters:
// float                          DefaultRespawnInvincibleTimeIn (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerRespawnComponent::SetRespawnInvincibleTime(float DefaultRespawnInvincibleTimeIn)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRespawnComponent.SetRespawnInvincibleTime");

	UPlayerRespawnComponent_SetRespawnInvincibleTime_Params params;
	params.DefaultRespawnInvincibleTimeIn = DefaultRespawnInvincibleTimeIn;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRespawnComponent.RespawnAllPlayer
// (Final, Native, Public)

void UPlayerRespawnComponent::RespawnAllPlayer()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRespawnComponent.RespawnAllPlayer");

	UPlayerRespawnComponent_RespawnAllPlayer_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRespawnComponent.RemovePlayerRespawnTimer
// (Final, Native, Public)
// Parameters:
// uint32_t                       PlayerKey                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAI                            (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerRespawnComponent::RemovePlayerRespawnTimer(uint32_t PlayerKey, bool bAI)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRespawnComponent.RemovePlayerRespawnTimer");

	UPlayerRespawnComponent_RemovePlayerRespawnTimer_Params params;
	params.PlayerKey = PlayerKey;
	params.bAI = bAI;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRespawnComponent.PlayerDelayAddItem
// (Final, Native, Public)
// Parameters:
// uint32_t                       PlayerKey                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerRespawnComponent::PlayerDelayAddItem(uint32_t PlayerKey, int ItemId)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRespawnComponent.PlayerDelayAddItem");

	UPlayerRespawnComponent_PlayerDelayAddItem_Params params;
	params.PlayerKey = PlayerKey;
	params.ItemId = ItemId;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRespawnComponent.OnCharacterStartFire
// (Final, Native, Private)
// Parameters:
// class ASTExtraWeapon*          _                              (Parm, ZeroConstructor, IsPlainOldData)
// class ASTExtraBaseCharacter*   Character                      (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerRespawnComponent::OnCharacterStartFire(class ASTExtraWeapon* _, class ASTExtraBaseCharacter* Character)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRespawnComponent.OnCharacterStartFire");

	UPlayerRespawnComponent_OnCharacterStartFire_Params params;
	params._ = _;
	params.Character = Character;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRespawnComponent.IsContainPlayerTimer
// (Final, Native, Public)
// Parameters:
// uint32_t                       PlayerKey                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlayerRespawnComponent::IsContainPlayerTimer(uint32_t PlayerKey)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRespawnComponent.IsContainPlayerTimer");

	UPlayerRespawnComponent_IsContainPlayerTimer_Params params;
	params.PlayerKey = PlayerKey;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerRespawnComponent.HandlePlayerDisuseItem
// (Final, Native, Private)
// Parameters:
// uint32_t                       PlayerKey                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemDefineID           DefineID                       (Parm)

void UPlayerRespawnComponent::HandlePlayerDisuseItem(uint32_t PlayerKey, const struct FItemDefineID& DefineID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRespawnComponent.HandlePlayerDisuseItem");

	UPlayerRespawnComponent_HandlePlayerDisuseItem_Params params;
	params.PlayerKey = PlayerKey;
	params.DefineID = DefineID;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRespawnComponent.HandleCacheWeapon
// (Final, Native, Protected)
// Parameters:
// uint32_t                       PlayerKey                      (Parm, ZeroConstructor, IsPlainOldData)
// class ASTExtraWeapon*          Weapon                         (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerRespawnComponent::HandleCacheWeapon(uint32_t PlayerKey, class ASTExtraWeapon* Weapon)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRespawnComponent.HandleCacheWeapon");

	UPlayerRespawnComponent_HandleCacheWeapon_Params params;
	params.PlayerKey = PlayerKey;
	params.Weapon = Weapon;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRespawnComponent.GetRespawnWeaponBulletNum
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FRespawnKeepAllItemData RespawnKeepAllItemData         (ConstParm, Parm, OutParm, ReferenceParm)
// int                            SlotType                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            SpecificID                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPlayerRespawnComponent::GetRespawnWeaponBulletNum(const struct FRespawnKeepAllItemData& RespawnKeepAllItemData, int SlotType, int SpecificID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRespawnComponent.GetRespawnWeaponBulletNum");

	UPlayerRespawnComponent_GetRespawnWeaponBulletNum_Params params;
	params.RespawnKeepAllItemData = RespawnKeepAllItemData;
	params.SlotType = SlotType;
	params.SpecificID = SpecificID;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerRespawnComponent.GetPlayerRespawnKeepAllItemData
// (Final, Native, Public, HasOutParms)
// Parameters:
// uint32_t                       PlayerKey                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAI                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FRespawnKeepAllItemData OutRespawnKeepAllItemData      (Parm, OutParm)
// bool                           bKeepBullet                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlayerRespawnComponent::GetPlayerRespawnKeepAllItemData(uint32_t PlayerKey, bool bAI, bool bKeepBullet, struct FRespawnKeepAllItemData* OutRespawnKeepAllItemData)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRespawnComponent.GetPlayerRespawnKeepAllItemData");

	UPlayerRespawnComponent_GetPlayerRespawnKeepAllItemData_Params params;
	params.PlayerKey = PlayerKey;
	params.bAI = bAI;
	params.bKeepBullet = bKeepBullet;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (OutRespawnKeepAllItemData != nullptr)
		*OutRespawnKeepAllItemData = params.OutRespawnKeepAllItemData;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerRespawnComponent.GetDefaultPlayerRespawnTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPlayerRespawnComponent::GetDefaultPlayerRespawnTime()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRespawnComponent.GetDefaultPlayerRespawnTime");

	UPlayerRespawnComponent_GetDefaultPlayerRespawnTime_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerRespawnComponent.GenerateRespawnKeepItems
// (Final, Native, Public, HasOutParms)
// Parameters:
// uint32_t                       PlayerKey                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAI                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FRespawnKeepAllItemData RespawnKeepAllItemData         (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bForceKeepItems                (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerRespawnComponent::GenerateRespawnKeepItems(uint32_t PlayerKey, bool bAI, const struct FRespawnKeepAllItemData& RespawnKeepAllItemData, bool bForceKeepItems)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRespawnComponent.GenerateRespawnKeepItems");

	UPlayerRespawnComponent_GenerateRespawnKeepItems_Params params;
	params.PlayerKey = PlayerKey;
	params.bAI = bAI;
	params.RespawnKeepAllItemData = RespawnKeepAllItemData;
	params.bForceKeepItems = bForceKeepItems;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRespawnComponent.DealWithDelayAddItem
// (Final, Native, Public)
// Parameters:
// uint32_t                       PlayerKey                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddAll                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bClearAll                      (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerRespawnComponent::DealWithDelayAddItem(uint32_t PlayerKey, bool bAddAll, bool bClearAll)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRespawnComponent.DealWithDelayAddItem");

	UPlayerRespawnComponent_DealWithDelayAddItem_Params params;
	params.PlayerKey = PlayerKey;
	params.bAddAll = bAddAll;
	params.bClearAll = bClearAll;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRespawnComponent.ClearDelayAddItems
// (Final, Native, Public)
// Parameters:
// uint32_t                       PlayerKey                      (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerRespawnComponent::ClearDelayAddItems(uint32_t PlayerKey)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRespawnComponent.ClearDelayAddItems");

	UPlayerRespawnComponent_ClearDelayAddItems_Params params;
	params.PlayerKey = PlayerKey;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRespawnComponent.ChangeWeaponSchemeIndex
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int                            InIndex                        (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerRespawnComponent::ChangeWeaponSchemeIndex(int InIndex)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRespawnComponent.ChangeWeaponSchemeIndex");

	UPlayerRespawnComponent_ChangeWeaponSchemeIndex_Params params;
	params.InIndex = InIndex;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRespawnComponent.AddPlayerRespawnIgnoreKeepItemType
// (Final, Native, Public)
// Parameters:
// uint32_t                       PlayerKey                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsAdd                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            itemType                       (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerRespawnComponent::AddPlayerRespawnIgnoreKeepItemType(uint32_t PlayerKey, bool IsAdd, int itemType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRespawnComponent.AddPlayerRespawnIgnoreKeepItemType");

	UPlayerRespawnComponent_AddPlayerRespawnIgnoreKeepItemType_Params params;
	params.PlayerKey = PlayerKey;
	params.IsAdd = IsAdd;
	params.itemType = itemType;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.TickRevival
// (Final, Native, Public)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerRevivalComponent::TickRevival(float DeltaSeconds)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.TickRevival");

	UPlayerRevivalComponent_TickRevival_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.SetRemainingRevivalTime
// (Final, Native, Public)
// Parameters:
// int                            InValue                        (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerRevivalComponent::SetRemainingRevivalTime(int InValue)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.SetRemainingRevivalTime");

	UPlayerRevivalComponent_SetRemainingRevivalTime_Params params;
	params.InValue = InValue;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.SetCaptureIDCardStatus
// (Final, Native, Public)
// Parameters:
// bool                           InValue                        (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerRevivalComponent::SetCaptureIDCardStatus(bool InValue)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.SetCaptureIDCardStatus");

	UPlayerRevivalComponent_SetCaptureIDCardStatus_Params params;
	params.InValue = InValue;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.OnPlayerRevived
// (Final, Native, Public)
// Parameters:
// class ASTExtraPlayerController* SaviorPC                       (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerRevivalComponent::OnPlayerRevived(class ASTExtraPlayerController* SaviorPC)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.OnPlayerRevived");

	UPlayerRevivalComponent_OnPlayerRevived_Params params;
	params.SaviorPC = SaviorPC;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.OnPlayerQuitSpectating
// (Final, Native, Public)

void UPlayerRevivalComponent::OnPlayerQuitSpectating()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.OnPlayerQuitSpectating");

	UPlayerRevivalComponent_OnPlayerQuitSpectating_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.OnPlayerGotoSpectating
// (Final, Native, Public)

void UPlayerRevivalComponent::OnPlayerGotoSpectating()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.OnPlayerGotoSpectating");

	UPlayerRevivalComponent_OnPlayerGotoSpectating_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.OnPlayerExitGame
// (Final, Native, Public)

void UPlayerRevivalComponent::OnPlayerExitGame()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.OnPlayerExitGame");

	UPlayerRevivalComponent_OnPlayerExitGame_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.OnPlayerEscapeWhenGameEnd
// (Final, Native, Public)
// Parameters:
// bool                           bIsPlayerAlive                 (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerRevivalComponent::OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.OnPlayerEscapeWhenGameEnd");

	UPlayerRevivalComponent_OnPlayerEscapeWhenGameEnd_Params params;
	params.bIsPlayerAlive = bIsPlayerAlive;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.LeaveRevivalState
// (Final, Native, Public)
// Parameters:
// uint32_t                       SaviorKey                      (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerRevivalComponent::LeaveRevivalState(uint32_t SaviorKey)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.LeaveRevivalState");

	UPlayerRevivalComponent_LeaveRevivalState_Params params;
	params.SaviorKey = SaviorKey;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.IsInWaittingRevivalState
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlayerRevivalComponent::IsInWaittingRevivalState()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.IsInWaittingRevivalState");

	UPlayerRevivalComponent_IsInWaittingRevivalState_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.GetRevivalCountDownTime
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPlayerRevivalComponent::GetRevivalCountDownTime()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.GetRevivalCountDownTime");

	UPlayerRevivalComponent_GetRevivalCountDownTime_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.GetRemainingRevivalTime
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPlayerRevivalComponent::GetRemainingRevivalTime()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.GetRemainingRevivalTime");

	UPlayerRevivalComponent_GetRemainingRevivalTime_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.GetCaptureIDCardStatus
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlayerRevivalComponent::GetCaptureIDCardStatus()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.GetCaptureIDCardStatus");

	UPlayerRevivalComponent_GetCaptureIDCardStatus_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.FindPlayerUIDFromKey
// (Final, Native, Public)
// Parameters:
// uint32_t                       PlayerKey                      (Parm, ZeroConstructor, IsPlainOldData)
// int64_t                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int64_t UPlayerRevivalComponent::FindPlayerUIDFromKey(uint32_t PlayerKey)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.FindPlayerUIDFromKey");

	UPlayerRevivalComponent_FindPlayerUIDFromKey_Params params;
	params.PlayerKey = PlayerKey;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.EnterRevivalState
// (Final, Native, Public)

void UPlayerRevivalComponent::EnterRevivalState()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.EnterRevivalState");

	UPlayerRevivalComponent_EnterRevivalState_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.CaptureIDCard
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FRevivalCardItemPickData InPickupData                   (ConstParm, Parm, OutParm, ReferenceParm)

void UPlayerRevivalComponent::CaptureIDCard(const struct FRevivalCardItemPickData& InPickupData)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.CaptureIDCard");

	UPlayerRevivalComponent_CaptureIDCard_Params params;
	params.InPickupData = InPickupData;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerRevivalComponent.BePickupRevivalCard
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FRevivalCardItemPickData InPickupData                   (ConstParm, Parm, OutParm, ReferenceParm)

void UPlayerRevivalComponent::BePickupRevivalCard(const struct FRevivalCardItemPickData& InPickupData)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerRevivalComponent.BePickupRevivalCard");

	UPlayerRevivalComponent_BePickupRevivalCard_Params params;
	params.InPickupData = InPickupData;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSecurityInfoCollector.StartOnPlane
// (Final, Native, Public, BlueprintCallable)

void UPlayerSecurityInfoCollector::StartOnPlane()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSecurityInfoCollector.StartOnPlane");

	UPlayerSecurityInfoCollector_StartOnPlane_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSecurityInfoCollector.PlayerCanJump
// (Final, Native, Public, BlueprintCallable)

void UPlayerSecurityInfoCollector::PlayerCanJump()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSecurityInfoCollector.PlayerCanJump");

	UPlayerSecurityInfoCollector_PlayerCanJump_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSecurityInfoCollector.HandleSyncCircleInfo
// (Final, Native, Protected)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerSecurityInfoCollector::HandleSyncCircleInfo(int Index)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSecurityInfoCollector.HandleSyncCircleInfo");

	UPlayerSecurityInfoCollector_HandleSyncCircleInfo_Params params;
	params.Index = Index;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSecurityInfoCollector.HandleCharacterSafeZoneTips
// (Final, Native, Protected)
// Parameters:
// float                          SafeZoneTime                   (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerSecurityInfoCollector::HandleCharacterSafeZoneTips(float SafeZoneTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSecurityInfoCollector.HandleCharacterSafeZoneTips");

	UPlayerSecurityInfoCollector_HandleCharacterSafeZoneTips_Params params;
	params.SafeZoneTime = SafeZoneTime;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSecurityInfoCollector.HandleCharacterCircleWaveOver
// (Final, Native, Protected)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerSecurityInfoCollector::HandleCharacterCircleWaveOver(int Index)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSecurityInfoCollector.HandleCharacterCircleWaveOver");

	UPlayerSecurityInfoCollector_HandleCharacterCircleWaveOver_Params params;
	params.Index = Index;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSecurityInfoCollector.HandleCharacterCircleSizeAndPosition
// (Final, Native, Protected, HasDefaults)
// Parameters:
// struct FVector                 BlueCircleSync                 (Parm, IsPlainOldData)
// struct FVector                 WhiteCircleSync                (Parm, IsPlainOldData)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerSecurityInfoCollector::HandleCharacterCircleSizeAndPosition(const struct FVector& BlueCircleSync, const struct FVector& WhiteCircleSync, int Index)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSecurityInfoCollector.HandleCharacterCircleSizeAndPosition");

	UPlayerSecurityInfoCollector_HandleCharacterCircleSizeAndPosition_Params params;
	params.BlueCircleSync = BlueCircleSync;
	params.WhiteCircleSync = WhiteCircleSync;
	params.Index = Index;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSecurityInfoCollector.HandleCharacterBlueCircleRun
// (Final, Native, Protected)
// Parameters:
// float                          BlueCircleRunTime              (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerSecurityInfoCollector::HandleCharacterBlueCircleRun(float BlueCircleRunTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSecurityInfoCollector.HandleCharacterBlueCircleRun");

	UPlayerSecurityInfoCollector_HandleCharacterBlueCircleRun_Params params;
	params.BlueCircleRunTime = BlueCircleRunTime;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSecurityInfoCollector.HandleCharacterBlueCirclePreWarning
// (Final, Native, Protected)
// Parameters:
// float                          BlueCirclePreWarningTime       (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerSecurityInfoCollector::HandleCharacterBlueCirclePreWarning(float BlueCirclePreWarningTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSecurityInfoCollector.HandleCharacterBlueCirclePreWarning");

	UPlayerSecurityInfoCollector_HandleCharacterBlueCirclePreWarning_Params params;
	params.BlueCirclePreWarningTime = BlueCirclePreWarningTime;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSecurityInfoCollector.HandleCharacterAttrChangedWithDetail
// (Final, Native, Protected)
// Parameters:
// class AActor*                  nowActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 AttrName                       (Parm, ZeroConstructor)
// float                          ValueDelta                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ResultValue                    (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerSecurityInfoCollector::HandleCharacterAttrChangedWithDetail(class AActor* nowActor, const struct FString& AttrName, float ValueDelta, float ResultValue)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSecurityInfoCollector.HandleCharacterAttrChangedWithDetail");

	UPlayerSecurityInfoCollector_HandleCharacterAttrChangedWithDetail_Params params;
	params.nowActor = nowActor;
	params.AttrName = AttrName;
	params.ValueDelta = ValueDelta;
	params.ResultValue = ResultValue;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSecurityInfoCollector.ExitParachute
// (Final, Native, Public, BlueprintCallable)

void UPlayerSecurityInfoCollector::ExitParachute()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSecurityInfoCollector.ExitParachute");

	UPlayerSecurityInfoCollector_ExitParachute_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSecurityInfoCollector.EnterParachute
// (Final, Native, Public, BlueprintCallable)

void UPlayerSecurityInfoCollector::EnterParachute()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSecurityInfoCollector.EnterParachute");

	UPlayerSecurityInfoCollector_EnterParachute_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSecurityInfoCollector.EnterJumping
// (Final, Native, Public, BlueprintCallable)

void UPlayerSecurityInfoCollector::EnterJumping()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSecurityInfoCollector.EnterJumping");

	UPlayerSecurityInfoCollector_EnterJumping_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSecurityInfoCollector.CalculatePlayerMoveData
// (Final, Native, Public, BlueprintCallable)

void UPlayerSecurityInfoCollector::CalculatePlayerMoveData()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSecurityInfoCollector.CalculatePlayerMoveData");

	UPlayerSecurityInfoCollector_CalculatePlayerMoveData_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSwimComponent.UpdateSwimCollisionHeightCpp
// (Final, Native, Public)

void UPlayerSwimComponent::UpdateSwimCollisionHeightCpp()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSwimComponent.UpdateSwimCollisionHeightCpp");

	UPlayerSwimComponent_UpdateSwimCollisionHeightCpp_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSwimComponent.PhysicsVolumeChanged
// (Final, Native, Public)
// Parameters:
// class APhysicsVolume*          NewVolume                      (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerSwimComponent::PhysicsVolumeChanged(class APhysicsVolume* NewVolume)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSwimComponent.PhysicsVolumeChanged");

	UPlayerSwimComponent_PhysicsVolumeChanged_Params params;
	params.NewVolume = NewVolume;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSwimComponent.OnPawnExitParachute
// (Final, Native, Protected)

void UPlayerSwimComponent::OnPawnExitParachute()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSwimComponent.OnPawnExitParachute");

	UPlayerSwimComponent_OnPawnExitParachute_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSwimComponent.LeaveWater
// (Final, Native, Public, BlueprintCallable)

void UPlayerSwimComponent::LeaveWater()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSwimComponent.LeaveWater");

	UPlayerSwimComponent_LeaveWater_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSwimComponent.GetWaterObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UPlayerSwimComponent::GetWaterObject()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSwimComponent.GetWaterObject");

	UPlayerSwimComponent_GetWaterObject_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerSwimComponent.EnterWater_BluePrint
// (Event, Public, BlueprintEvent)

void UPlayerSwimComponent::EnterWater_BluePrint()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSwimComponent.EnterWater_BluePrint");

	UPlayerSwimComponent_EnterWater_BluePrint_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSwimComponent.EnterWater
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  WaterObject                    (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerSwimComponent::EnterWater(class AActor* WaterObject)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSwimComponent.EnterWater");

	UPlayerSwimComponent_EnterWater_Params params;
	params.WaterObject = WaterObject;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerSwimComponent.BP_UnderWaterStateChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           bEnterWater                    (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerSwimComponent::BP_UnderWaterStateChanged(bool bEnterWater)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerSwimComponent.BP_UnderWaterStateChanged");

	UPlayerSwimComponent_BP_UnderWaterStateChanged_Params params;
	params.bEnterWater = bEnterWater;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.VaultServer
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                          dis                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 VaultKey                       (Parm, ZeroConstructor)
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// class AActor*                  checkActor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxFall              (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxDis               (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitPoint                       (Parm, IsPlainOldData)
// class AActor*                  WindowActor                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                movedir                        (Parm, IsPlainOldData)

void UPlayerVaultComponent::VaultServer(float dis, float Height, float Length, const struct FString& VaultKey, const struct FVector& StartPos, class AActor* checkActor, float crossblockMaxFall, float crossblockMaxDis, const struct FVector& HitPoint, class AActor* WindowActor, const struct FRotator& movedir)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.VaultServer");

	UPlayerVaultComponent_VaultServer_Params params;
	params.dis = dis;
	params.Height = Height;
	params.Length = Length;
	params.VaultKey = VaultKey;
	params.StartPos = StartPos;
	params.checkActor = checkActor;
	params.crossblockMaxFall = crossblockMaxFall;
	params.crossblockMaxDis = crossblockMaxDis;
	params.HitPoint = HitPoint;
	params.WindowActor = WindowActor;
	params.movedir = movedir;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.VaultFromCPP
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlayerVaultComponent::VaultFromCPP()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.VaultFromCPP");

	UPlayerVaultComponent_VaultFromCPP_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.VaultFail
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FString                 Reason                         (Parm, ZeroConstructor)

void UPlayerVaultComponent::VaultFail(const struct FString& Reason)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.VaultFail");

	UPlayerVaultComponent_VaultFail_Params params;
	params.Reason = Reason;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.VaultAll
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                          dis                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 VaultKey                       (Parm, ZeroConstructor)
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// class AActor*                  checkActor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossmaxFalling                (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossmaxDis                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitPoint                       (Parm, IsPlainOldData)
// struct FRotator                movedir                        (Parm, IsPlainOldData)

void UPlayerVaultComponent::VaultAll(float dis, float Height, float Length, const struct FString& VaultKey, const struct FVector& StartPos, class AActor* checkActor, float crossmaxFalling, float crossmaxDis, const struct FVector& HitPoint, const struct FRotator& movedir)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.VaultAll");

	UPlayerVaultComponent_VaultAll_Params params;
	params.dis = dis;
	params.Height = Height;
	params.Length = Length;
	params.VaultKey = VaultKey;
	params.StartPos = StartPos;
	params.checkActor = checkActor;
	params.crossmaxFalling = crossmaxFalling;
	params.crossmaxDis = crossmaxDis;
	params.HitPoint = HitPoint;
	params.movedir = movedir;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.UpdateVault_BluePrint
// (Native, Event, Public, BlueprintEvent)

void UPlayerVaultComponent::UpdateVault_BluePrint()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.UpdateVault_BluePrint");

	UPlayerVaultComponent_UpdateVault_BluePrint_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.StopVault
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UPlayerVaultComponent::StopVault()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.StopVault");

	UPlayerVaultComponent_StopVault_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.StartAsyncLoadVaultAnimRes
// (Final, Native, Public)
// Parameters:
// bool                           IsTDM                          (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerVaultComponent::StartAsyncLoadVaultAnimRes(bool IsTDM)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.StartAsyncLoadVaultAnimRes");

	UPlayerVaultComponent_StartAsyncLoadVaultAnimRes_Params params;
	params.IsTDM = IsTDM;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.StartAsyncLoadTeamVaultAnimRes
// (Native, Public)

void UPlayerVaultComponent::StartAsyncLoadTeamVaultAnimRes()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.StartAsyncLoadTeamVaultAnimRes");

	UPlayerVaultComponent_StartAsyncLoadTeamVaultAnimRes_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.ServerRPC_VaultServer
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable, NetValidate)
// Parameters:
// float                          dis                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 VaultKey                       (Parm, ZeroConstructor)
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// class AActor*                  InCheckActor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxFall              (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxDis               (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InHitPoint                     (Parm, IsPlainOldData)
// class AActor*                  WindowActor                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                movedir                        (Parm, IsPlainOldData)

void UPlayerVaultComponent::ServerRPC_VaultServer(float dis, float Height, float Length, const struct FString& VaultKey, const struct FVector& StartPos, class AActor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, const struct FVector& InHitPoint, class AActor* WindowActor, const struct FRotator& movedir)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.ServerRPC_VaultServer");

	UPlayerVaultComponent_ServerRPC_VaultServer_Params params;
	params.dis = dis;
	params.Height = Height;
	params.Length = Length;
	params.VaultKey = VaultKey;
	params.StartPos = StartPos;
	params.InCheckActor = InCheckActor;
	params.crossblockMaxFall = crossblockMaxFall;
	params.crossblockMaxDis = crossblockMaxDis;
	params.InHitPoint = InHitPoint;
	params.WindowActor = WindowActor;
	params.movedir = movedir;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.ServerRPC_StopVault
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)

void UPlayerVaultComponent::ServerRPC_StopVault()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.ServerRPC_StopVault");

	UPlayerVaultComponent_ServerRPC_StopVault_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.ServerRPC_FpsVaultServer
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable, NetValidate)
// Parameters:
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// struct FVector                 topPos                         (Parm, IsPlainOldData)
// float                          crossblockMaxFall              (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxDis               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           isjump                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                movedir                        (Parm, IsPlainOldData)
// float                          blobkthick                     (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerVaultComponent::ServerRPC_FpsVaultServer(const struct FVector& StartPos, const struct FVector& topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, const struct FRotator& movedir, float blobkthick)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.ServerRPC_FpsVaultServer");

	UPlayerVaultComponent_ServerRPC_FpsVaultServer_Params params;
	params.StartPos = StartPos;
	params.topPos = topPos;
	params.crossblockMaxFall = crossblockMaxFall;
	params.crossblockMaxDis = crossblockMaxDis;
	params.isjump = isjump;
	params.movedir = movedir;
	params.blobkthick = blobkthick;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.OnRespawned_BlueprintImpl
// (Event, Public, BlueprintEvent)

void UPlayerVaultComponent::OnRespawned_BlueprintImpl()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.OnRespawned_BlueprintImpl");

	UPlayerVaultComponent_OnRespawned_BlueprintImpl_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.MulticastRPC_VaultFail
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)
// Parameters:
// struct FString                 Reason                         (Parm, ZeroConstructor)

void UPlayerVaultComponent::MulticastRPC_VaultFail(const struct FString& Reason)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.MulticastRPC_VaultFail");

	UPlayerVaultComponent_MulticastRPC_VaultFail_Params params;
	params.Reason = Reason;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.MulticastRPC_VaultAll
// (Net, NetReliable, Native, Event, NetMulticast, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          dis                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 VaultKey                       (Parm, ZeroConstructor)
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// class AActor*                  InCheckActor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxFall              (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxDis               (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InHitPoint                     (Parm, IsPlainOldData)
// struct FRotator                movedir                        (Parm, IsPlainOldData)

void UPlayerVaultComponent::MulticastRPC_VaultAll(float dis, float Height, float Length, const struct FString& VaultKey, const struct FVector& StartPos, class AActor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, const struct FVector& InHitPoint, const struct FRotator& movedir)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.MulticastRPC_VaultAll");

	UPlayerVaultComponent_MulticastRPC_VaultAll_Params params;
	params.dis = dis;
	params.Height = Height;
	params.Length = Length;
	params.VaultKey = VaultKey;
	params.StartPos = StartPos;
	params.InCheckActor = InCheckActor;
	params.crossblockMaxFall = crossblockMaxFall;
	params.crossblockMaxDis = crossblockMaxDis;
	params.InHitPoint = InHitPoint;
	params.movedir = movedir;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.MulticastRPC_StopVault
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)

void UPlayerVaultComponent::MulticastRPC_StopVault()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.MulticastRPC_StopVault");

	UPlayerVaultComponent_MulticastRPC_StopVault_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.MulticastRPC_FpsVaultToAll
// (Net, NetReliable, Native, Event, NetMulticast, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// struct FVector                 topPos                         (Parm, IsPlainOldData)
// float                          crossblockMaxFall              (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxDis               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           isjump                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                movedir                        (Parm, IsPlainOldData)
// float                          blobkthick                     (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerVaultComponent::MulticastRPC_FpsVaultToAll(const struct FVector& StartPos, const struct FVector& topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, const struct FRotator& movedir, float blobkthick)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.MulticastRPC_FpsVaultToAll");

	UPlayerVaultComponent_MulticastRPC_FpsVaultToAll_Params params;
	params.StartPos = StartPos;
	params.topPos = topPos;
	params.crossblockMaxFall = crossblockMaxFall;
	params.crossblockMaxDis = crossblockMaxDis;
	params.isjump = isjump;
	params.movedir = movedir;
	params.blobkthick = blobkthick;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.GetVaultKeyByBlockHeight
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UPlayerVaultComponent::GetVaultKeyByBlockHeight(float Height)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.GetVaultKeyByBlockHeight");

	UPlayerVaultComponent_GetVaultKeyByBlockHeight_Params params;
	params.Height = Height;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.GetRelicateRotator
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FRotator UPlayerVaultComponent::GetRelicateRotator()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.GetRelicateRotator");

	UPlayerVaultComponent_GetRelicateRotator_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.FpsVaultToAll
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// struct FVector                 topPos                         (Parm, IsPlainOldData)
// float                          crossblockMaxFall              (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxDis               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           isjump                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                movedir                        (Parm, IsPlainOldData)
// float                          blobkthick                     (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerVaultComponent::FpsVaultToAll(const struct FVector& StartPos, const struct FVector& topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, const struct FRotator& movedir, float blobkthick)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.FpsVaultToAll");

	UPlayerVaultComponent_FpsVaultToAll_Params params;
	params.StartPos = StartPos;
	params.topPos = topPos;
	params.crossblockMaxFall = crossblockMaxFall;
	params.crossblockMaxDis = crossblockMaxDis;
	params.isjump = isjump;
	params.movedir = movedir;
	params.blobkthick = blobkthick;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.FpsVaultServer
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// struct FVector                 topPos                         (Parm, IsPlainOldData)
// float                          crossblockMaxFall              (Parm, ZeroConstructor, IsPlainOldData)
// float                          crossblockMaxDis               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           isjump                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                movedir                        (Parm, IsPlainOldData)
// float                          blobkthick                     (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerVaultComponent::FpsVaultServer(const struct FVector& StartPos, const struct FVector& topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, const struct FRotator& movedir, float blobkthick)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.FpsVaultServer");

	UPlayerVaultComponent_FpsVaultServer_Params params;
	params.StartPos = StartPos;
	params.topPos = topPos;
	params.crossblockMaxFall = crossblockMaxFall;
	params.crossblockMaxDis = crossblockMaxDis;
	params.isjump = isjump;
	params.movedir = movedir;
	params.blobkthick = blobkthick;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.EndVault
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UPlayerVaultComponent::EndVault()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.EndVault");

	UPlayerVaultComponent_EndVault_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.DSCheckStopVault
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UPlayerVaultComponent::DSCheckStopVault()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.DSCheckStopVault");

	UPlayerVaultComponent_DSCheckStopVault_Params params;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.CheckCanVaultCPPWrapper
// (Native, Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// bool                           IsActive                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerVaultComponent::CheckCanVaultCPPWrapper(bool* IsActive)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.CheckCanVaultCPPWrapper");

	UPlayerVaultComponent_CheckCanVaultCPPWrapper_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (IsActive != nullptr)
		*IsActive = params.IsActive;
}


// Function ShadowTrackerExtra.PlayerVaultComponent.AsyncLoadVaultAnimResFinish
// (Final, Native, Public)
// Parameters:
// unsigned char                  PawnSubType                    (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerVaultComponent::AsyncLoadVaultAnimResFinish(unsigned char PawnSubType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PlayerVaultComponent.AsyncLoadVaultAnimResFinish");

	UPlayerVaultComponent_AsyncLoadVaultAnimResFinish_Params params;
	params.PawnSubType = PawnSubType;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PolygonSoftBoundaryActor.IsInsideSoftBound
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Loc                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APolygonSoftBoundaryActor::IsInsideSoftBound(const struct FVector& Loc)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PolygonSoftBoundaryActor.IsInsideSoftBound");

	APolygonSoftBoundaryActor_IsInsideSoftBound_Params params;
	params.Loc = Loc;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PolygonSoftBoundaryActor.GetTheNearestPoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Loc                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector2D APolygonSoftBoundaryActor::GetTheNearestPoint(const struct FVector& Loc)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PolygonSoftBoundaryActor.GetTheNearestPoint");

	APolygonSoftBoundaryActor_GetTheNearestPoint_Params params;
	params.Loc = Loc;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PoseWithFriendComponent.PoseWithFriend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           IsSelfMale                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsRight                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsFriendMale                   (Parm, ZeroConstructor, IsPlainOldData)

void UPoseWithFriendComponent::PoseWithFriend(bool IsSelfMale, bool IsRight, bool IsFriendMale)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PoseWithFriendComponent.PoseWithFriend");

	UPoseWithFriendComponent_PoseWithFriend_Params params;
	params.IsSelfMale = IsSelfMale;
	params.IsRight = IsRight;
	params.IsFriendMale = IsFriendMale;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PoseWithFriendComponent.OnPoseWithFriendLoaded
// (Final, Native, Public)
// Parameters:
// class UObject*                 LoadedObject                   (Parm, ZeroConstructor, IsPlainOldData)

void UPoseWithFriendComponent::OnPoseWithFriendLoaded(class UObject* LoadedObject)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PoseWithFriendComponent.OnPoseWithFriendLoaded");

	UPoseWithFriendComponent_OnPoseWithFriendLoaded_Params params;
	params.LoadedObject = LoadedObject;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PoseWithFriendComponent.CancelPoseWithFriend
// (Final, Native, Public, BlueprintCallable)

void UPoseWithFriendComponent::CancelPoseWithFriend()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PoseWithFriendComponent.CancelPoseWithFriend");

	UPoseWithFriendComponent_CancelPoseWithFriend_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PostProcessManager.SetMobileCustomDepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           IsEnable                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Depth                          (Parm, ZeroConstructor, IsPlainOldData)

void APostProcessManager::SetMobileCustomDepth(bool IsEnable, int Depth)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PostProcessManager.SetMobileCustomDepth");

	APostProcessManager_SetMobileCustomDepth_Params params;
	params.IsEnable = IsEnable;
	params.Depth = Depth;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PostProcessManager.GetPPVByTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   TagName                        (Parm, ZeroConstructor, IsPlainOldData)
// class APostProcessVolume*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APostProcessVolume* APostProcessManager::GetPPVByTag(const struct FName& TagName)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PostProcessManager.GetPPVByTag");

	APostProcessManager_GetPPVByTag_Params params;
	params.TagName = TagName;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PostProcessManager.GetInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APostProcessManager*     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APostProcessManager* APostProcessManager::GetInstance()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PostProcessManager.GetInstance");

	APostProcessManager_GetInstance_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	static auto defaultObj = StaticClass()->GetDefaultObject();
	defaultObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PostProcessManager.GetActivePPV
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APostProcessVolume*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APostProcessVolume* APostProcessManager::GetActivePPV()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PostProcessManager.GetActivePPV");

	APostProcessManager_GetActivePPV_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PostProcessManager.EnableDrawOutlineEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           IsEnable                       (Parm, ZeroConstructor, IsPlainOldData)

void APostProcessManager::EnableDrawOutlineEffect(bool IsEnable)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PostProcessManager.EnableDrawOutlineEffect");

	APostProcessManager_EnableDrawOutlineEffect_Params params;
	params.IsEnable = IsEnable;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PredictLineComponent.SetPredictParams
// (Final, BlueprintCosmetic, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 InStartPoint                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 InVelocity                     (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UPredictLineComponent::SetPredictParams(const struct FVector& InStartPoint, const struct FVector& InVelocity)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PredictLineComponent.SetPredictParams");

	UPredictLineComponent_SetPredictParams_Params params;
	params.InStartPoint = InStartPoint;
	params.InVelocity = InVelocity;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PredictLineComponent.SetPredictActorTemplate
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                  InActorTemplate                (Parm, ZeroConstructor, IsPlainOldData)

void UPredictLineComponent::SetPredictActorTemplate(class UClass* InActorTemplate)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PredictLineComponent.SetPredictActorTemplate");

	UPredictLineComponent_SetPredictActorTemplate_Params params;
	params.InActorTemplate = InActorTemplate;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.StartDropToPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 DestinPos                      (Parm, IsPlainOldData)
// class ACharacter*              KillerPawn                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DeadPawn                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           InTraceGround                  (Parm, ZeroConstructor, IsPlainOldData)

void UProduceDropItemComponent::StartDropToPosition(const struct FVector& DestinPos, class ACharacter* KillerPawn, class AActor* DeadPawn, bool InTraceGround)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.StartDropToPosition");

	UProduceDropItemComponent_StartDropToPosition_Params params;
	params.DestinPos = DestinPos;
	params.KillerPawn = KillerPawn;
	params.DeadPawn = DeadPawn;
	params.InTraceGround = InTraceGround;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.StartDrop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  DeadCharacter                  (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             Killer                         (Parm, ZeroConstructor, IsPlainOldData)

void UProduceDropItemComponent::StartDrop(class AActor* DeadCharacter, class AController* Killer)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.StartDrop");

	UProduceDropItemComponent_StartDrop_Params params;
	params.DeadCharacter = DeadCharacter;
	params.Killer = Killer;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.SetProduceID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            produceID                      (Parm, ZeroConstructor, IsPlainOldData)

void UProduceDropItemComponent::SetProduceID(int produceID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.SetProduceID");

	UProduceDropItemComponent_SetProduceID_Params params;
	params.produceID = produceID;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.SetNightDropPlanIDList
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    DayIdList                      (Parm, OutParm, ZeroConstructor)
// TArray<int>                    NightIdList                    (Parm, OutParm, ZeroConstructor)

void UProduceDropItemComponent::SetNightDropPlanIDList(TArray<int>* DayIdList, TArray<int>* NightIdList)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.SetNightDropPlanIDList");

	UProduceDropItemComponent_SetNightDropPlanIDList_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (DayIdList != nullptr)
		*DayIdList = params.DayIdList;
	if (NightIdList != nullptr)
		*NightIdList = params.NightIdList;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.SetDropPlanIDList
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    IDList                         (Parm, OutParm, ZeroConstructor)

void UProduceDropItemComponent::SetDropPlanIDList(TArray<int>* IDList)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.SetDropPlanIDList");

	UProduceDropItemComponent_SetDropPlanIDList_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (IDList != nullptr)
		*IDList = params.IDList;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.SetDropItemLifeSpan
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            ItemTime                       (Parm, ZeroConstructor, IsPlainOldData)

void UProduceDropItemComponent::SetDropItemLifeSpan(int ItemTime)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.SetDropItemLifeSpan");

	UProduceDropItemComponent_SetDropItemLifeSpan_Params params;
	params.ItemTime = ItemTime;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.RandomCircleDrop
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<struct FPickUpItemData> PropDatas                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FTransform              PawnTrans                      (Parm, IsPlainOldData)
// class AActor*                  IgnorePawn                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  KillerActor                    (Parm, ZeroConstructor, IsPlainOldData)

void UProduceDropItemComponent::RandomCircleDrop(TArray<struct FPickUpItemData> PropDatas, const struct FTransform& PawnTrans, class AActor* IgnorePawn, class AActor* KillerActor)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.RandomCircleDrop");

	UProduceDropItemComponent_RandomCircleDrop_Params params;
	params.PropDatas = PropDatas;
	params.PawnTrans = PawnTrans;
	params.IgnorePawn = IgnorePawn;
	params.KillerActor = KillerActor;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.OnOwnerPawnDead
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class ASTExtraSimpleCharacter* DeadCharacter                  (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             Killer                         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              KillingHitInfo                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 KillingHitImpulseDir           (Parm, IsPlainOldData)
// class UClass*                  KillingHitDamageType           (Parm, ZeroConstructor, IsPlainOldData)

void UProduceDropItemComponent::OnOwnerPawnDead(class ASTExtraSimpleCharacter* DeadCharacter, class AController* Killer, class AActor* DamageCauser, const struct FHitResult& KillingHitInfo, const struct FVector& KillingHitImpulseDir, class UClass* KillingHitDamageType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.OnOwnerPawnDead");

	UProduceDropItemComponent_OnOwnerPawnDead_Params params;
	params.DeadCharacter = DeadCharacter;
	params.Killer = Killer;
	params.DamageCauser = DamageCauser;
	params.KillingHitInfo = KillingHitInfo;
	params.KillingHitImpulseDir = KillingHitImpulseDir;
	params.KillingHitDamageType = KillingHitDamageType;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.NineGridDrop
// (Native, Public, HasOutParms, HasDefaults)
// Parameters:
// TArray<struct FPickUpItemData> PropDatas                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FTransform              PawnTrans                      (Parm, IsPlainOldData)

void UProduceDropItemComponent::NineGridDrop(TArray<struct FPickUpItemData> PropDatas, const struct FTransform& PawnTrans)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.NineGridDrop");

	UProduceDropItemComponent_NineGridDrop_Params params;
	params.PropDatas = PropDatas;
	params.PawnTrans = PawnTrans;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.GetWrapperActorPath
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// struct FItemDefineID           DefineID                       (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UProduceDropItemComponent::GetWrapperActorPath(const struct FItemDefineID& DefineID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.GetWrapperActorPath");

	UProduceDropItemComponent_GetWrapperActorPath_Params params;
	params.DefineID = DefineID;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.GetWrapperActorClass
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FItemDefineID           DefineID                       (Parm)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* UProduceDropItemComponent::GetWrapperActorClass(const struct FItemDefineID& DefineID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.GetWrapperActorClass");

	UProduceDropItemComponent_GetWrapperActorClass_Params params;
	params.DefineID = DefineID;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.GetGenerateWrapperList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class APickUpWrapperActor*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class APickUpWrapperActor*> UProduceDropItemComponent::GetGenerateWrapperList()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.GetGenerateWrapperList");

	UProduceDropItemComponent_GetGenerateWrapperList_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.GetDropItemCfgList
// (Native, Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// TArray<struct FDropItemConfig> DropList                       (Parm, OutParm, ZeroConstructor)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UProduceDropItemComponent::GetDropItemCfgList(TArray<struct FDropItemConfig>* DropList)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.GetDropItemCfgList");

	UProduceDropItemComponent_GetDropItemCfgList_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (DropList != nullptr)
		*DropList = params.DropList;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.GetCountStrNum
// (Final, Native, Public)
// Parameters:
// struct FString                 CountStr                       (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UProduceDropItemComponent::GetCountStrNum(const struct FString& CountStr)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.GetCountStrNum");

	UProduceDropItemComponent_GetCountStrNum_Params params;
	params.CountStr = CountStr;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.GenerateDropItemByOwner
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FDropPropData>   FinalDropItems                 (Parm, OutParm, ZeroConstructor)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UProduceDropItemComponent::GenerateDropItemByOwner(TArray<struct FDropPropData>* FinalDropItems)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.GenerateDropItemByOwner");

	UProduceDropItemComponent_GenerateDropItemByOwner_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (FinalDropItems != nullptr)
		*FinalDropItems = params.FinalDropItems;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.GenerateDropItemByCfg
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FDropPropData>   FinalDropItems                 (Parm, OutParm, ZeroConstructor)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UProduceDropItemComponent::GenerateDropItemByCfg(TArray<struct FDropPropData>* FinalDropItems)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.GenerateDropItemByCfg");

	UProduceDropItemComponent_GenerateDropItemByCfg_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (FinalDropItems != nullptr)
		*FinalDropItems = params.FinalDropItems;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.DropToTreasureBox
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<struct FDropPropData>   PropData                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class AActor*                  TargetActor                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 BoxName                        (Parm, ZeroConstructor)
// EPickUpBoxType                 BoxType                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Offset                         (Parm, IsPlainOldData)
// bool                           bIsAutoExpand                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFixBoxName                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UProduceDropItemComponent::DropToTreasureBox(TArray<struct FDropPropData> PropData, class AActor* TargetActor, const struct FString& BoxName, EPickUpBoxType BoxType, const struct FVector& Offset, bool bIsAutoExpand, bool bFixBoxName)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.DropToTreasureBox");

	UProduceDropItemComponent_DropToTreasureBox_Params params;
	params.PropData = PropData;
	params.TargetActor = TargetActor;
	params.BoxName = BoxName;
	params.BoxType = BoxType;
	params.Offset = Offset;
	params.bIsAutoExpand = bIsAutoExpand;
	params.bFixBoxName = bFixBoxName;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.DropToTombBox
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FPickUpItemData> PropData                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class ACharacter*              DeadPawn                       (Parm, ZeroConstructor, IsPlainOldData)

void UProduceDropItemComponent::DropToTombBox(TArray<struct FPickUpItemData> PropData, class ACharacter* DeadPawn)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.DropToTombBox");

	UProduceDropItemComponent_DropToTombBox_Params params;
	params.PropData = PropData;
	params.DeadPawn = DeadPawn;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.DropToTarget
// (Native, Public)
// Parameters:
// struct FItemDefineID           DefineID                       (Parm)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// class UBackpackComponent*      backpack                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UProduceDropItemComponent::DropToTarget(const struct FItemDefineID& DefineID, int Count, class UBackpackComponent* backpack)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.DropToTarget");

	UProduceDropItemComponent_DropToTarget_Params params;
	params.DefineID = DefineID;
	params.Count = Count;
	params.backpack = backpack;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.DropToGround
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPickUpItemData         PropData                       (ConstParm, Parm, OutParm, ReferenceParm)
// struct FTransform              WrapperTrans                   (Parm, IsPlainOldData)
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// bool                           ShowGroundEffect               (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UProduceDropItemComponent::DropToGround(const struct FPickUpItemData& PropData, const struct FTransform& WrapperTrans, const struct FVector& StartPos, bool ShowGroundEffect)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.DropToGround");

	UProduceDropItemComponent_DropToGround_Params params;
	params.PropData = PropData;
	params.WrapperTrans = WrapperTrans;
	params.StartPos = StartPos;
	params.ShowGroundEffect = ShowGroundEffect;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.DropToCommonTreasureBox
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Producer                       (Parm, ZeroConstructor, IsPlainOldData)

void UProduceDropItemComponent::DropToCommonTreasureBox(class AActor* Producer)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.DropToCommonTreasureBox");

	UProduceDropItemComponent_DropToCommonTreasureBox_Params params;
	params.Producer = Producer;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.DropToCommonLootBox
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                  Producer                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              BoxTrans                       (Parm, IsPlainOldData)
// class ACommonTreasureBox*      CommonTreasureBox              (Parm, ZeroConstructor, IsPlainOldData)

void UProduceDropItemComponent::DropToCommonLootBox(class AActor* Producer, const struct FTransform& BoxTrans, class ACommonTreasureBox* CommonTreasureBox)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.DropToCommonLootBox");

	UProduceDropItemComponent_DropToCommonLootBox_Params params;
	params.Producer = Producer;
	params.BoxTrans = BoxTrans;
	params.CommonTreasureBox = CommonTreasureBox;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.DropOutPropsNearActor
// (Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FDropPropData>   PropDataList                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class AActor*                  StartActor                     (Parm, ZeroConstructor, IsPlainOldData)

void UProduceDropItemComponent::DropOutPropsNearActor(TArray<struct FDropPropData> PropDataList, class AActor* StartActor)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.DropOutPropsNearActor");

	UProduceDropItemComponent_DropOutPropsNearActor_Params params;
	params.PropDataList = PropDataList;
	params.StartActor = StartActor;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.DropOutProps
// (Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FDropPropData>   PropData                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class ACharacter*              KillerPawn                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DeadPawn                       (Parm, ZeroConstructor, IsPlainOldData)

void UProduceDropItemComponent::DropOutProps(TArray<struct FDropPropData> PropData, class ACharacter* KillerPawn, class AActor* DeadPawn)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.DropOutProps");

	UProduceDropItemComponent_DropOutProps_Params params;
	params.PropData = PropData;
	params.KillerPawn = KillerPawn;
	params.DeadPawn = DeadPawn;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.CalcDropItemListByDropRuleByCfg
// (Native, Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// struct FDropItemConfig         DropRuleCfg                    (ConstParm, Parm, OutParm, ReferenceParm)
// TArray<struct FDropPropData>   DropItemList                   (Parm, OutParm, ZeroConstructor)

void UProduceDropItemComponent::CalcDropItemListByDropRuleByCfg(const struct FDropItemConfig& DropRuleCfg, TArray<struct FDropPropData>* DropItemList)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.CalcDropItemListByDropRuleByCfg");

	UProduceDropItemComponent_CalcDropItemListByDropRuleByCfg_Params params;
	params.DropRuleCfg = DropRuleCfg;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (DropItemList != nullptr)
		*DropItemList = params.DropItemList;
}


// Function ShadowTrackerExtra.ProduceDropItemComponent.CalcDropItemListByDropRule
// (Native, Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// TArray<struct FDropPropData>   DropItemList                   (Parm, OutParm, ZeroConstructor)
// int                            DropPlanId                     (Parm, ZeroConstructor, IsPlainOldData)

void UProduceDropItemComponent::CalcDropItemListByDropRule(int DropPlanId, TArray<struct FDropPropData>* DropItemList)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProduceDropItemComponent.CalcDropItemListByDropRule");

	UProduceDropItemComponent_CalcDropItemListByDropRule_Params params;
	params.DropPlanId = DropPlanId;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (DropItemList != nullptr)
		*DropItemList = params.DropItemList;
}


// Function ShadowTrackerExtra.ProjectileBall.SetVelocityFromActor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Causer                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          XYSpeed                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ZSpeed                         (Parm, ZeroConstructor, IsPlainOldData)

void AProjectileBall::SetVelocityFromActor(class AActor* Causer, float XYSpeed, float ZSpeed)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProjectileBall.SetVelocityFromActor");

	AProjectileBall_SetVelocityFromActor_Params params;
	params.Causer = Causer;
	params.XYSpeed = XYSpeed;
	params.ZSpeed = ZSpeed;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProjectileBall.OnStop
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void AProjectileBall::OnStop(const struct FHitResult& Hit)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProjectileBall.OnStop");

	AProjectileBall_OnStop_Params params;
	params.Hit = Hit;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProjectileBall.IsPlayerStandOn
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASTExtraBaseCharacter*   Character                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AProjectileBall::IsPlayerStandOn(class ASTExtraBaseCharacter* Character)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProjectileBall.IsPlayerStandOn");

	AProjectileBall_IsPlayerStandOn_Params params;
	params.Character = Character;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.ProjectileBall.BP_OnStop
// (Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void AProjectileBall::BP_OnStop(const struct FHitResult& Hit)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProjectileBall.BP_OnStop");

	AProjectileBall_BP_OnStop_Params params;
	params.Hit = Hit;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProjectileBall.AddVelocityFromActor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Causer                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          XYSpeed                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ZSpeed                         (Parm, ZeroConstructor, IsPlainOldData)

void AProjectileBall::AddVelocityFromActor(class AActor* Causer, float XYSpeed, float ZSpeed)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProjectileBall.AddVelocityFromActor");

	AProjectileBall_AddVelocityFromActor_Params params;
	params.Causer = Causer;
	params.XYSpeed = XYSpeed;
	params.ZSpeed = ZSpeed;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProjectileDecoratorActor.SetVelocityMulticast
// (Net, NetReliable, Native, Event, NetMulticast, Public, HasDefaults)
// Parameters:
// struct FVector                 Velocity                       (Parm, IsPlainOldData)

void AProjectileDecoratorActor::SetVelocityMulticast(const struct FVector& Velocity)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProjectileDecoratorActor.SetVelocityMulticast");

	AProjectileDecoratorActor_SetVelocityMulticast_Params params;
	params.Velocity = Velocity;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProjectileDecoratorActor.SetRotateRateMulticast
// (Net, NetReliable, Native, Event, NetMulticast, Public, HasDefaults)
// Parameters:
// struct FRotator                RotationRate                   (Parm, IsPlainOldData)

void AProjectileDecoratorActor::SetRotateRateMulticast(const struct FRotator& RotationRate)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProjectileDecoratorActor.SetRotateRateMulticast");

	AProjectileDecoratorActor_SetRotateRateMulticast_Params params;
	params.RotationRate = RotationRate;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProjectileDecoratorActor.OnRep_SimulateStop
// (Final, Native, Public)

void AProjectileDecoratorActor::OnRep_SimulateStop()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProjectileDecoratorActor.OnRep_SimulateStop");

	AProjectileDecoratorActor_OnRep_SimulateStop_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProjectileDecoratorActor.OnProjectileStop
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void AProjectileDecoratorActor::OnProjectileStop(const struct FHitResult& ImpactResult)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProjectileDecoratorActor.OnProjectileStop");

	AProjectileDecoratorActor_OnProjectileStop_Params params;
	params.ImpactResult = ImpactResult;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.ProjectileDecoratorActor.OnProjectileBounce
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 ImpactVelocity                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void AProjectileDecoratorActor::OnProjectileBounce(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.ProjectileDecoratorActor.OnProjectileBounce");

	AProjectileDecoratorActor_OnProjectileBounce_Params params;
	params.ImpactResult = ImpactResult;
	params.ImpactVelocity = ImpactVelocity;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PropDropOutMethodInterface.RandomCircleDrop
// (Native, Public, HasOutParms, HasDefaults)
// Parameters:
// TArray<struct FPickUpItemData> PropDatas                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FTransform              PawnTrans                      (Parm, IsPlainOldData)
// class AActor*                  IgnorePawn                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  KillerActor                    (Parm, ZeroConstructor, IsPlainOldData)

void UPropDropOutMethodInterface::RandomCircleDrop(TArray<struct FPickUpItemData> PropDatas, const struct FTransform& PawnTrans, class AActor* IgnorePawn, class AActor* KillerActor)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PropDropOutMethodInterface.RandomCircleDrop");

	UPropDropOutMethodInterface_RandomCircleDrop_Params params;
	params.PropDatas = PropDatas;
	params.PawnTrans = PawnTrans;
	params.IgnorePawn = IgnorePawn;
	params.KillerActor = KillerActor;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PropDropOutMethodInterface.NineGridDrop
// (Native, Public, HasOutParms, HasDefaults)
// Parameters:
// TArray<struct FPickUpItemData> PropDatas                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FTransform              PawnTrans                      (Parm, IsPlainOldData)

void UPropDropOutMethodInterface::NineGridDrop(TArray<struct FPickUpItemData> PropDatas, const struct FTransform& PawnTrans)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PropDropOutMethodInterface.NineGridDrop");

	UPropDropOutMethodInterface_NineGridDrop_Params params;
	params.PropDatas = PropDatas;
	params.PawnTrans = PawnTrans;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PropDropOutMethodInterface.DropToTreasureBox
// (Native, Public, HasOutParms, HasDefaults)
// Parameters:
// TArray<struct FDropPropData>   PropData                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class AActor*                  TargetActor                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 BoxName                        (Parm, ZeroConstructor)
// EPickUpBoxType                 BoxType                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Offset                         (Parm, IsPlainOldData)
// bool                           bIsAutoExpand                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFixBoxName                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPropDropOutMethodInterface::DropToTreasureBox(TArray<struct FDropPropData> PropData, class AActor* TargetActor, const struct FString& BoxName, EPickUpBoxType BoxType, const struct FVector& Offset, bool bIsAutoExpand, bool bFixBoxName)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PropDropOutMethodInterface.DropToTreasureBox");

	UPropDropOutMethodInterface_DropToTreasureBox_Params params;
	params.PropData = PropData;
	params.TargetActor = TargetActor;
	params.BoxName = BoxName;
	params.BoxType = BoxType;
	params.Offset = Offset;
	params.bIsAutoExpand = bIsAutoExpand;
	params.bFixBoxName = bFixBoxName;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PropDropOutMethodInterface.DropToTombBox
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FPickUpItemData> PropData                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class ACharacter*              DeadPawn                       (Parm, ZeroConstructor, IsPlainOldData)

void UPropDropOutMethodInterface::DropToTombBox(TArray<struct FPickUpItemData> PropData, class ACharacter* DeadPawn)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PropDropOutMethodInterface.DropToTombBox");

	UPropDropOutMethodInterface_DropToTombBox_Params params;
	params.PropData = PropData;
	params.DeadPawn = DeadPawn;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PropDropOutMethodInterface.DropToTarget
// (Native, Public)
// Parameters:
// struct FItemDefineID           DefineID                       (Parm)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// class UBackpackComponent*      backpack                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPropDropOutMethodInterface::DropToTarget(const struct FItemDefineID& DefineID, int Count, class UBackpackComponent* backpack)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PropDropOutMethodInterface.DropToTarget");

	UPropDropOutMethodInterface_DropToTarget_Params params;
	params.DefineID = DefineID;
	params.Count = Count;
	params.backpack = backpack;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PropDropOutMethodInterface.DropToGround
// (Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FPickUpItemData         PropData                       (ConstParm, Parm, OutParm, ReferenceParm)
// struct FTransform              WrapperTrans                   (Parm, IsPlainOldData)
// struct FVector                 CenterPos                      (Parm, IsPlainOldData)
// bool                           ShowGroundEffect               (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UPropDropOutMethodInterface::DropToGround(const struct FPickUpItemData& PropData, const struct FTransform& WrapperTrans, const struct FVector& CenterPos, bool ShowGroundEffect)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PropDropOutMethodInterface.DropToGround");

	UPropDropOutMethodInterface_DropToGround_Params params;
	params.PropData = PropData;
	params.WrapperTrans = WrapperTrans;
	params.CenterPos = CenterPos;
	params.ShowGroundEffect = ShowGroundEffect;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PropDropOutMethodInterface.DropOutPropsNearActor
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FDropPropData>   PropDataList                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class AActor*                  StartActor                     (Parm, ZeroConstructor, IsPlainOldData)

void UPropDropOutMethodInterface::DropOutPropsNearActor(TArray<struct FDropPropData> PropDataList, class AActor* StartActor)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PropDropOutMethodInterface.DropOutPropsNearActor");

	UPropDropOutMethodInterface_DropOutPropsNearActor_Params params;
	params.PropDataList = PropDataList;
	params.StartActor = StartActor;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PropDropOutMethodInterface.DropOutProps
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FDropPropData>   PropData                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class ACharacter*              KillerPawn                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DeadPawn                       (Parm, ZeroConstructor, IsPlainOldData)

void UPropDropOutMethodInterface::DropOutProps(TArray<struct FDropPropData> PropData, class ACharacter* KillerPawn, class AActor* DeadPawn)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PropDropOutMethodInterface.DropOutProps");

	UPropDropOutMethodInterface_DropOutProps_Params params;
	params.PropData = PropData;
	params.KillerPawn = KillerPawn;
	params.DeadPawn = DeadPawn;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PubgmAutoRun.VehicleTowardTo
// (Final, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)

void UPubgmAutoRun::VehicleTowardTo(float X, float Y, float Z)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PubgmAutoRun.VehicleTowardTo");

	UPubgmAutoRun_VehicleTowardTo_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PubgmAutoRun.VehicleMoveTo
// (Final, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)

void UPubgmAutoRun::VehicleMoveTo(float X, float Y, float Z)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PubgmAutoRun.VehicleMoveTo");

	UPubgmAutoRun_VehicleMoveTo_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PubgmAutoRun.VehicleMoveAndTowardTo
// (Final, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          x1                             (Parm, ZeroConstructor, IsPlainOldData)
// float                          y1                             (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z1                             (Parm, ZeroConstructor, IsPlainOldData)

void UPubgmAutoRun::VehicleMoveAndTowardTo(float X, float Y, float Z, float x1, float y1, float Z1)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PubgmAutoRun.VehicleMoveAndTowardTo");

	UPubgmAutoRun_VehicleMoveAndTowardTo_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;
	params.x1 = x1;
	params.y1 = y1;
	params.Z1 = Z1;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// DelegateFunction ShadowTrackerExtra.PubgmAutoRun.OnPubgmAutoRunSimulateAction__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int                            SimActionType                  (Parm, ZeroConstructor, IsPlainOldData)

void UPubgmAutoRun::OnPubgmAutoRunSimulateAction__DelegateSignature(int SimActionType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("DelegateFunction ShadowTrackerExtra.PubgmAutoRun.OnPubgmAutoRunSimulateAction__DelegateSignature");

	UPubgmAutoRun_OnPubgmAutoRunSimulateAction__DelegateSignature_Params params;
	params.SimActionType = SimActionType;

	auto flags = pFunc->FunctionFlags;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PubgmAutoRun.NeedCmdAutoRun
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPubgmAutoRun::NeedCmdAutoRun()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PubgmAutoRun.NeedCmdAutoRun");

	UPubgmAutoRun_NeedCmdAutoRun_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	static auto defaultObj = StaticClass()->GetDefaultObject();
	defaultObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PubgmAutoRun.NativeSimulateAction
// (Final, Native, Public)
// Parameters:
// int                            SimActionType                  (Parm, ZeroConstructor, IsPlainOldData)

void UPubgmAutoRun::NativeSimulateAction(int SimActionType)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PubgmAutoRun.NativeSimulateAction");

	UPubgmAutoRun_NativeSimulateAction_Params params;
	params.SimActionType = SimActionType;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PubgmAutoRun.InitRoutePoint
// (Final, Native, Public)

void UPubgmAutoRun::InitRoutePoint()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PubgmAutoRun.InitRoutePoint");

	UPubgmAutoRun_InitRoutePoint_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PubgmAutoRun.GMGotoPosition
// (Final, Native, Public)
// Parameters:
// int                            X                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            Y                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            Z                              (Parm, ZeroConstructor, IsPlainOldData)

void UPubgmAutoRun::GMGotoPosition(int X, int Y, int Z)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PubgmAutoRun.GMGotoPosition");

	UPubgmAutoRun_GMGotoPosition_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PubgmAutoRun.GetRangeActorsPostions
// (Final, Native, Public, HasDefaults)
// Parameters:
// int                            ActorType                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OriginPos                      (Parm, IsPlainOldData)
// float                          RangeRadius                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FVector>         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FVector> UPubgmAutoRun::GetRangeActorsPostions(int ActorType, const struct FVector& OriginPos, float RangeRadius)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PubgmAutoRun.GetRangeActorsPostions");

	UPubgmAutoRun_GetRangeActorsPostions_Params params;
	params.ActorType = ActorType;
	params.OriginPos = OriginPos;
	params.RangeRadius = RangeRadius;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PubgmAutoRun.GetPoisonCircleLocation
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UPubgmAutoRun::GetPoisonCircleLocation()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PubgmAutoRun.GetPoisonCircleLocation");

	UPubgmAutoRun_GetPoisonCircleLocation_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PubgmAutoRun.GetPlayerSpeed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            SpeedIdx                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPubgmAutoRun::GetPlayerSpeed(int SpeedIdx)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PubgmAutoRun.GetPlayerSpeed");

	UPubgmAutoRun_GetPlayerSpeed_Params params;
	params.SpeedIdx = SpeedIdx;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	static auto defaultObj = StaticClass()->GetDefaultObject();
	defaultObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PubgmAutoRun.GetNearestXTPointToVehicle
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FTransform              FirstPoint                     (Parm, OutParm, IsPlainOldData)
// struct FTransform              SecendPoint                    (Parm, OutParm, IsPlainOldData)
// bool                           bNext                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPubgmAutoRun::GetNearestXTPointToVehicle(bool bNext, struct FTransform* FirstPoint, struct FTransform* SecendPoint)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PubgmAutoRun.GetNearestXTPointToVehicle");

	UPubgmAutoRun_GetNearestXTPointToVehicle_Params params;
	params.bNext = bNext;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (FirstPoint != nullptr)
		*FirstPoint = params.FirstPoint;
	if (SecendPoint != nullptr)
		*SecendPoint = params.SecendPoint;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PubgmAutoRun.ForceVehiclePosPull
// (Final, Native, Public)
// Parameters:
// bool                           bNext                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPubgmAutoRun::ForceVehiclePosPull(bool bNext)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PubgmAutoRun.ForceVehiclePosPull");

	UPubgmAutoRun_ForceVehiclePosPull_Params params;
	params.bNext = bNext;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PVECircleMgrComponent.OnCircleMoveEnd
// (Final, Native, Public)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void UPVECircleMgrComponent::OnCircleMoveEnd(int Index)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PVECircleMgrComponent.OnCircleMoveEnd");

	UPVECircleMgrComponent_OnCircleMoveEnd_Params params;
	params.Index = Index;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PVECircleMgrComponent.NextCircleWithCircleID
// (Final, Native, Public)
// Parameters:
// int                            CircleID                       (Parm, ZeroConstructor, IsPlainOldData)

void UPVECircleMgrComponent::NextCircleWithCircleID(int CircleID)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PVECircleMgrComponent.NextCircleWithCircleID");

	UPVECircleMgrComponent_NextCircleWithCircleID_Params params;
	params.CircleID = CircleID;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PVECircleMgrComponent.NextCircle
// (Final, Native, Public)

void UPVECircleMgrComponent::NextCircle()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PVECircleMgrComponent.NextCircle");

	UPVECircleMgrComponent_NextCircle_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PVECircleMgrComponent.InitPVECircleDeployConfig
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FGameLevelDesc          LevelDesc                      (Parm, OutParm)
// struct FLevelData              LevelData                      (Parm, OutParm)

void UPVECircleMgrComponent::InitPVECircleDeployConfig(struct FGameLevelDesc* LevelDesc, struct FLevelData* LevelData)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PVECircleMgrComponent.InitPVECircleDeployConfig");

	UPVECircleMgrComponent_InitPVECircleDeployConfig_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	if (LevelDesc != nullptr)
		*LevelDesc = params.LevelDesc;
	if (LevelData != nullptr)
		*LevelData = params.LevelData;
}


// Function ShadowTrackerExtra.PVEInfectionGameMode.StartNewRound
// (Final, Native, Public)

void APVEInfectionGameMode::StartNewRound()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PVEInfectionGameMode.StartNewRound");

	APVEInfectionGameMode_StartNewRound_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PVEInfectionGameMode.RestartPlayerAtPlayerStart
// (Native, Public, BlueprintCallable)
// Parameters:
// class AController*             NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  StartSpot                      (Parm, ZeroConstructor, IsPlainOldData)

void APVEInfectionGameMode::RestartPlayerAtPlayerStart(class AController* NewPlayer, class AActor* StartSpot)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PVEInfectionGameMode.RestartPlayerAtPlayerStart");

	APVEInfectionGameMode_RestartPlayerAtPlayerStart_Params params;
	params.NewPlayer = NewPlayer;
	params.StartSpot = StartSpot;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PVEInfectionGameMode.RecordRoleNum
// (Final, Native, Public)

void APVEInfectionGameMode::RecordRoleNum()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PVEInfectionGameMode.RecordRoleNum");

	APVEInfectionGameMode_RecordRoleNum_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PVEInfectionGameMode.PlayChangeToRevengerEffect
// (Final, Native, Public)
// Parameters:
// int                            RNum                           (Parm, ZeroConstructor, IsPlainOldData)

void APVEInfectionGameMode::PlayChangeToRevengerEffect(int RNum)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PVEInfectionGameMode.PlayChangeToRevengerEffect");

	APVEInfectionGameMode_PlayChangeToRevengerEffect_Params params;
	params.RNum = RNum;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PVEInfectionGameMode.OnPlayerControlDestroyEnd
// (Native, Public)
// Parameters:
// uint32_t                       PlayerKey                      (Parm, ZeroConstructor, IsPlainOldData)

void APVEInfectionGameMode::OnPlayerControlDestroyEnd(uint32_t PlayerKey)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PVEInfectionGameMode.OnPlayerControlDestroyEnd");

	APVEInfectionGameMode_OnPlayerControlDestroyEnd_Params params;
	params.PlayerKey = PlayerKey;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PVEInfectionGameMode.LoginCheckReCorrecctTeamID
// (Native, Public)
// Parameters:
// class ASTExtraPlayerController* EPlayer                        (Parm, ZeroConstructor, IsPlainOldData)

void APVEInfectionGameMode::LoginCheckReCorrecctTeamID(class ASTExtraPlayerController* EPlayer)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PVEInfectionGameMode.LoginCheckReCorrecctTeamID");

	APVEInfectionGameMode_LoginCheckReCorrecctTeamID_Params params;
	params.EPlayer = EPlayer;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;
}


// Function ShadowTrackerExtra.PVEInfectionGameMode.IsZombiePlayer
// (Final, Native, Public)
// Parameters:
// class AController*             Player                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APVEInfectionGameMode::IsZombiePlayer(class AController* Player)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PVEInfectionGameMode.IsZombiePlayer");

	APVEInfectionGameMode_IsZombiePlayer_Params params;
	params.Player = Player;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PVEInfectionGameMode.GetRoundNum
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APVEInfectionGameMode::GetRoundNum()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PVEInfectionGameMode.GetRoundNum");

	APVEInfectionGameMode_GetRoundNum_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PVEInfectionGameMode.GetPawnSubTypeByController
// (Final, Native, Public)
// Parameters:
// class AController*             Player                         (Parm, ZeroConstructor, IsPlainOldData)
// ECharacterSubType              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ECharacterSubType APVEInfectionGameMode::GetPawnSubTypeByController(class AController* Player)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PVEInfectionGameMode.GetPawnSubTypeByController");

	APVEInfectionGameMode_GetPawnSubTypeByController_Params params;
	params.Player = Player;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PVEInfectionGameMode.GetInfectionUnActiveEnhancerCount
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APVEInfectionGameMode::GetInfectionUnActiveEnhancerCount()
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PVEInfectionGameMode.GetInfectionUnActiveEnhancerCount");

	APVEInfectionGameMode_GetInfectionUnActiveEnhancerCount_Params params;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PVEInfectionGameMode.GetInfectionRoundRoleCountBySubType
// (Final, Native, Public)
// Parameters:
// ECharacterSubType              SubType                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsIncludeDeath                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APVEInfectionGameMode::GetInfectionRoundRoleCountBySubType(ECharacterSubType SubType, bool IsIncludeDeath)
{
	static UFunction *pFunc = 0;
	if (!pFunc)
		pFunc  = UObject::FindObject<UFunction>("Function ShadowTrackerExtra.PVEInfectionGameMode.GetInfectionRoundRoleCountBySubType");

	APVEInfectionGameMode_GetInfectionRoundRoleCountBySubType_Params params;
	params.SubType = SubType;
	params.IsIncludeDeath = IsIncludeDeath;

	auto flags = pFunc->FunctionFlags;
	pFunc->FunctionFlags |= 0x400;

	UObject *currentObj = (UObject *) this;
	currentObj->ProcessEvent(pFunc, &params);

	pFunc->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShadowTrackerExtra.PVEInfectionGameMode.GetInfectionRoundRoleCountByMainType
// (Final, Native, Public)
// Parameters:
// ECharacterMainType             MainType                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsIncludeDeath                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APVEInfectionGameMode::GetInfectionRoundRoleCountByMainType(ECharacterMainType MainType, bool I